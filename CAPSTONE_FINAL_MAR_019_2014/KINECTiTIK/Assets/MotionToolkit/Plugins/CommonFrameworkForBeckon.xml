<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommonFrameworkForBeckon</name>
    </assembly>
    <members>
        <member name="T:OmekFramework.Common.GeneralUtils.Logger">
            <summary>
            Provides logging services to the framework.
            The logging service uses log4net.
            Using "logconfig.xml" one may change the configuration of log4net.
            See http://logging.apache.org/log4net/release/manual/configuration.html for information.
            This class define a seperate logger for each sender class, which have the same name as the sender.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogDebug(System.Object,System.String)">
            <summary>
            Writes a DEBUG level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogInfo(System.Object,System.String)">
            <summary>
            Writes an INFO level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogWarn(System.Object,System.String)">
            <summary>
            Writes a WARN level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogError(System.Object,System.String)">
            <summary>
            Writes an ERROR level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogFatal(System.Object,System.String)">
            <summary>
            Writes a FATAL level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogDebug(System.Type,System.String)">
            <summary>
            Writes a DEBUG level log message
            </summary>
            <param name="senderType">The type of the sender class</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogInfo(System.Type,System.String)">
            <summary>
            Writes an INFO level log message
            </summary>
            <param name="senderType">The type of the sender class</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogWarn(System.Type,System.String)">
            <summary>
            Writes a WARN level log message
            </summary>
            <param name="senderType">The type of the sender class</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogError(System.Type,System.String)">
            <summary>
            Writes an ERROR level log message
            </summary>
            <param name="senderType">The type of the sender class</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogFatal(System.Type,System.String)">
            <summary>
            Writes a FATAL level log message
            </summary>
            <param name="senderType">The type of the sender class</param>
            <param name="message">The log message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogDebugFormat(System.Object,System.String,System.Object[])">
            <summary>
            Writes a DEBUG level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogInfoFormat(System.Object,System.String,System.Object[])">
            <summary>
            Writes an INFO level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
             <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogWarnFormat(System.Object,System.String,System.Object[])">
            <summary>
            Writes a WARN level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogErrorFormat(System.Object,System.String,System.Object[])">
            <summary>
            Writes an ERROR level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogFatalFormat(System.Object,System.String,System.Object[])">
            <summary>
            Writes a FATAL level log message
            </summary>
            <param name="sender">The class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogDebugFormat(System.Type,System.String,System.Object[])">
            <summary>
            Writes a DEBUG level log message
            </summary>
            <param name="senderType">The type ofthe class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogInfoFormat(System.Type,System.String,System.Object[])">
            <summary>
            Writes an INFO level log message
            </summary>
            <param name="senderType">The type ofthe class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogWarnFormat(System.Type,System.String,System.Object[])">
            <summary>
            Writes a WARN level log message
            </summary>
            <param name="senderType">The type ofthe class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogErrorFormat(System.Type,System.String,System.Object[])">
            <summary>
            Writes an ERROR level log message
            </summary>
            <param name="senderType">The type ofthe class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Logger.LogFatalFormat(System.Type,System.String,System.Object[])">
            <summary>
            Writes a FATAL level log message
            </summary>
            <param name="senderType">The type ofthe class writing this message</param>
            <param name="format">System.String.Format syntax of the message </param>
            <param name="args">args for the message</param>
        </member>
        <member name="T:OmekFramework.Common.Data.Image">
            <summary>
            A high level class used to easily obtain the center of mass
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.Image.m_RGBImage">
            <summary>
            A reference to the RGB image data
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.Image.m_depthImage">
            <summary>
            A reference to the depth image data
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.Image.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.Image.RGB">
            <summary>
            A reference to the RGB image data
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.Image.Depth">
            <summary>
            A reference to the depth image data
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.OnSDKEvent">
            <summary>
            A handler for SDK or coded events
            </summary>
            <param name="eventInfo">Information about the event</param>
        </member>
        <member name="T:OmekFramework.Common.Main.EventNotifier">
            <summary>
            Responsible on SDK and coded events registraion, managing and handling.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_codedEventLocker">
            <summary>
            Locker for coded events.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_systemEventLocker">
            <summary>
            Locker for all sorts of system events.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_eventsInSystem">
            <summary>
            A dictionary indicating the current events in THIS frame in the event system.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_codedEvents">
            <summary>
            A dictionary containing the current coded events registered.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_codedEventsGlobal">
            <summary>
            A dictionary containing the currently globally operated coded events.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_codedEventsPerTrackedObject">
            <summary>
            A dictionary containing the currently per person operating events (for each person there is a dictionary of the coded events).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_lastTrackedObjectsInSystem">
            <summary>
            The persons in system in the previous frame (used for performance purposes).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_toAddCodedEvents">
            <summary>
            A queue of coded events that should be added in this frame (for synchronization purposes).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_toRemoveCodedEvents">
            <summary>
            A queue of coded events that should be removed in this frame (for synchronization purposes).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_realSdkEventNotifier">
            <summary>
            The event notifier used for actual SDK events.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_registeredGeneralEvents">
            <summary>
            Keeps track of registered event handler for general SDK event.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.EventNotifier.m_registeredSpecificEvents">
            <summary>
            Keeps track of registered event handler per person for SDK events.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.#ctor(OmekFramework.Common.Main.SDKEventDispatcher)">
            <summary>
            Constructs the EventNotifier the notifier to be used for the SDK events and locks to be used (supposed to be static locks).
            </summary>
            <param name="in_SDKEventNotifier">The SDK event dispatcher used to listen and fire events related to SDK events</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.AddCodedEvent``1(System.String)">
            <summary>
            Add a new coded event.
            An instance of this coded event will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system. Note all reference types in the coded event will be copied by default unless otherwise overriden in the type.
            </summary>
            <typeparam name="T">The type of the coded event</typeparam>
            <param name="eventName">The name to use as the identifier of the coded event</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.AddCodedEvent(System.Type,System.String)">
            <summary>
            Add a new coded event.
            An instance of this coded event will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system. Note all reference types in the coded event will be copied by default unless otherwise overriden in the type.
            </summary>
            <param name="SDKEventDispatcherType">The type of the coded event. Must be derived from SDKEventDispatcher</param>
            <param name="eventName">The name to use as the identifier of the coded event</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.AddCodedEvent``1(System.String,OmekFramework.Common.Main.SDKEventDispatcher.MetaData)">
            <summary>
            Add a new coded event.
            An instance of this coded event will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system, all sharing the given metaData object. Note that apart from the explicit meta data object
            all other reference types in the coded event will be copied by default unless otherwise overridden in the type.
            </summary>
            <typeparam name="T">The type of the coded event</typeparam>
            <param name="eventName">The name to use as the identifier of the coded event</param>
            <param name="metaData">Meta data object to be shared by generated instances of the coded event. Note that if there is no constructor in the coded event
            with the MetaData or type that derived from it, it will be constructed with no meta data.</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.AddCodedEvent(System.Type,System.String,OmekFramework.Common.Main.SDKEventDispatcher.MetaData)">
            <summary>
            Add a new coded event.
            An instance of this coded event will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system, all sharing the given metaData object. Note that apart from the explicit meta data object
            all other reference types in the coded event will be copied by default unless otherwise overriden in the type.
            </summary>
            <param name="SDKEventDispatcherType">The type of the coded event. Must be derived from SDKEventDispatcher</param>
            <param name="eventName">The name to use as the identifier of the coded event</param>
            <param name="metaData">Meta data object to be shared by generated instances of the coded event. Note that if there is no constructor in the coded event
            with the MetaData or type that derived from it, it will be constructed with no meta data.</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.RemoveCodedEvent``1">
            <summary>
            Remove a coded event of the specified type.
            </summary>
            <typeparam name="T">Remove the coded event of the specified type.</typeparam>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.RemoveCodedEvent(OmekFramework.Common.Main.SDKEventDispatcher)">
            <summary>
            Remove a coded event with the same name as the given coded event.
            </summary>
            <param name="toRemove">Coded event from which to take the name of the coded event to remove</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.RemoveCodedEvent(System.String)">
            <summary>
            Remove the coded event with the following name.
            </summary>
            <param name="toRemove">The name of the coded event to remove</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.IsEventActive">
            <summary>
            Returns true if the any event is currently active.
            </summary>
            <returns>True if the any event is currently active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.IsEventActive(System.String)">
            <summary>
            Returns true if the named event is currently active.
            </summary>
            <param name="eventName">The event to check</param>
            <returns>True if the named event is currently active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.IsEventActive(System.String,System.Collections.Generic.List{OmekFramework.Common.BasicTypes.CommonDefines.EventNotification}@)">
            <summary>
            Returns true if the named event is currently active. Also outputs it occurrence list (if it occurs for a couple of persons, the list will have more than one element).
            </summary>
            <param name="eventName">The event to check</param>
            <param name="eventoccurrences">(output) a list of all the event occurrences</param>
            <returns>True if the named event is currently active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.IsEventActive(System.String,System.UInt32,OmekFramework.Common.BasicTypes.CommonDefines.EventNotification@)">
            <summary>
            Returns true if the named event is currently active for the specified person id. Also outputs its occurrence information.
            /// </summary>
            <param name="eventName">The event to check</param>
            <param name="trackedObjectID">The person id to check for the event occurrence</param>
            <param name="eventoccurrence">(output) the event occurrence information</param>
            <returns>True if the named event is currently active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.IsEventActive(System.String,System.UInt32)">
            <summary>
            Returns true if the named event is currently active for the specified person id.
            /// </summary>
            <param name="eventName">The event to check</param>
            <param name="trackedObjectID">The person id to check for the event occurrence</param>
            <returns>True if the named event is currently active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.RegisterGeneralEvent(System.String,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register an event handler to be called when the given event name occurs.
            </summary>
            <param name="eventName">The event name to register</param>
            <param name="onEvent">The handler to call</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.UnregisterGeneralEvent(System.String,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister an event handler to be called when the given event name occurs.
            </summary>
            <param name="eventName">The event name to unregister</param>
            <param name="onEvent">The handler not to call</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.RegisterSpecificEvent(System.String,System.UInt32,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register an event handler to be called when the given event name occurs for the specified person id.
            </summary>
            <param name="eventName">The event name to register</param>
            <param name="trackedObjectID">The person id for which to register the handler</param>
            <param name="onEvent">The handler to call</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.UnregisterSpecificEvent(System.String,System.UInt32,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister an event handler to be called when the given event name occurs for the specified person id.
            </summary>
            <param name="eventName">The event name to unregister</param>
            <param name="trackedObjectID">The person id for which to unregister the handler</param>
            <param name="onEvent">The handler not to call</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.GetCurrentEventsCopy">
            <summary>
            Returns the a copy of all the current events.
            </summary>
            <returns>A copy of all current events</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.CurrentEventNames">
            <summary>
            Returns all current event names.
            </summary>
            <returns>All current event names</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.GetNextFiredEvent(System.Boolean,OmekFramework.Common.BasicTypes.CommonDefines.EventNotification@)">
            <summary>
            A private method used to obtain the next event (gesture / alert) from the SDK.
            </summary>
            <param name="sdkEvent">A class giving details on the event.</param>
            <param name="isAlert">Is it an alert, or is it a gesture</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.UpdateState">
            <summary>
            Update the state of the EventNotifier system. Must be run each frame to process the new events.
            If any error occurs, it continues onwards.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.AddCodedEvent(OmekFramework.Common.Main.SDKEventDispatcher)">
            <summary>
            Add a new coded event.
            Note that the given coded event will be copied and cleared according to it's type implementation.
            Default behaviour is a shallow copy and all reference types will be shared while all value types
            will be copied.
            </summary>
            <param name="toAdd">The coded event to add</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.UpdateCodedEvents(System.Collections.Generic.Dictionary{System.String,OmekFramework.Common.Main.SDKEventDispatcher})">
            <summary>
            Update the given coded events.
            </summary>
            <param name="codedEvents">Coded events to update</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.UpdateCodedEventsPerTrackedObjectRegistration">
            <summary>
            Update the registration and unregistration of coded events according to the persons in system and the coded events dictionaries.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.OnFiredEvent(OmekFramework.Common.BasicTypes.CommonDefines.EventNotification)">
            <summary>
            A OnFiredEventDelegate meant to be fired when an event occurs.
            Adds the event to the m_eventsInSystem.
            </summary>
            <param name="eventInfo">The current event occurrence</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.AddToCodedEventToAddQueue(OmekFramework.Common.Main.SDKEventDispatcher)">
            <summary>
            Add a coded event to the coded events queue, these will be entered in the following frame.
            </summary>
            <param name="toAdd">The coded event to add</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.ProcessCodedEventsToAddQueue">
            <summary>
            Process the coded events that were added in this frame.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.AddToCodedEventToRemoveQueue(System.String)">
            <summary>
            Add a coded evens to the queue of the events to be removed in this frame.
            </summary>
            <param name="toRemove">The coded event to remove</param>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.ProcessCodedEventsToRemoveQueue">
            <summary>
            Process the coded events to remove this frame.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.EventNotifier.RemoveTrackedObjectCodedEvent(System.String)">
            <summary>
            Remove the given per person coded event
            </summary>
            <param name="toRemove">the given per person coded event</param>
        </member>
        <member name="T:OmekFramework.Common.Pointer.TouchController">
            <summary>
            Used to inject touch events to the OS
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.TrackedObject">
            <summary>
            High level wrapper for tracked object, contain skeleton and mask
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.ITrackedObject">
            <summary>
            High level wrapper for tracked object, contain skeleton and mask
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.ITrackedObject.Mask">
            <summary>
            A reference to the person's mask image data
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.ITrackedObject.Skeleton">
            <summary>
            A reference to the object's tracked skeleton
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.TrackedObject.m_skeleton">
            <summary>
            A reference to the person's tracked skeleton
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.TrackedObject.m_mask">
            <summary>
            A reference to the person's mask image data
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.TrackedObject.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="personIndex">The person's index</param>
            <param name="jointsInSkeleton">array of joints relevent for this skeleton</param>
        </member>
        <member name="P:OmekFramework.Common.Data.TrackedObject.Skeleton">
            <summary>
            A reference to the person's tracked skeleton
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.TrackedObject.Mask">
            <summary>
            A reference to the person's mask image data
            </summary>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.TooltipAttribute">
            <summary>
            Used to specify what tooltip should be display for a specific item
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.TooltipAttribute.Tooltip">
            <summary>
            the tooltip text
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.TooltipAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="tooltip">the tooltip text</param>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.Time.Time">
            <summary>
            Provides information about time in system.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.Time.Time.g_curTime">
            <summary>
            The current running time of the application
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.Time.Time.g_startTime">
            <summary>
            The start time of the application.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.Time.Time.UpdateState">
            <summary>
            Updates the current time.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.Time.Time.GetCurrentTime">
            <summary>
            Returns the current time.
            </summary>
            <returns>The current time</returns>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.Time.Time.time">
            <summary>
            The current application time.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.Time.Time.realtimeSinceStartup">
            <summary>
            The real time since the start of the applicaiton.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.CenterOfMass2DGetter">
            <summary>
            Obtains the center of mass
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.IVector3Getter">
            <summary>
            Allows the acquirement of Vector3 Data
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.IVector3Getter.Get(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@)">
            <summary>
            Gets Vector3 data
            </summary>
            <param name="outPos">(output) the out position</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="F:OmekFramework.Common.Data.CenterOfMass2DGetter.m_lastReturnCode">
            <summary>
            The last acquired return code
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CenterOfMass2DGetter.m_centerOfMass2D">
            <summary>
            The last acquired 2D center of mass
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CenterOfMass2DGetter.m_trackedObjectIndex">
            <summary>
            The person index used
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CenterOfMass2DGetter.m_lastRequestUpdateTime">
            <summary>
            The last time at which the center was acquired successfully
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.CenterOfMass2DGetter.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="trackedObjectIndex">The trackedObject index for the getter</param>
        </member>
        <member name="M:OmekFramework.Common.Data.CenterOfMass2DGetter.Get(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@)">
            <summary>
            Gets the center position
            </summary>
            <param name="outPos">(output) the center position</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Data.CenterOfMass2DGetter.Update">
            <summary>
            Updates the center position
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.CenterOfMass3DGetter">
            <summary>
            Obtains the center of mass
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CenterOfMass3DGetter.m_lastReturnCode">
            <summary>
            The last acquired return code
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CenterOfMass3DGetter.m_centerOfMass3D">
            <summary>
            The last acquired 3D center of mass
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CenterOfMass3DGetter.m_trackedObjectIndex">
            <summary>
            The trackedObject index used
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CenterOfMass3DGetter.m_lastRequestUpdateTime">
            <summary>
            The last time at which the center was acquired successfully
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.CenterOfMass3DGetter.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="trackedObjectIndex">The trackedObject index for the getter</param>
        </member>
        <member name="M:OmekFramework.Common.Data.CenterOfMass3DGetter.Get(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@)">
            <summary>
            Gets the center position
            </summary>
            <param name="outPos">(output) the center position</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Data.CenterOfMass3DGetter.Update">
            <summary>
            Updates the center position
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.SDKEventDispatcher">
            <summary>
            Abstract class responsible on events in the system - update their states, and fires them.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SDKEventDispatcher.m_name">
            <summary>
            Name of the event
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.SDKEventDispatcher.#ctor(OmekFramework.Common.Main.SDKEventDispatcher.MetaData)">
            <summary>
            Constructor
            </summary>
            <param name="metaDataRef">reference to the MetaData relevant for this Dispatcher</param>
        </member>
        <member name="M:OmekFramework.Common.Main.SDKEventDispatcher.GetName``1">
            <summary>
            Staticaly gets the name of the type given.
            </summary>
            <typeparam name="T">The type to get the name of.</typeparam>
            <returns>The name of the type.</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.SDKEventDispatcher.UpdateState">
            <summary>
            Update the state and check if any of the events occured. If so, fire the event/s and create their needed CommonDefines.EventNotification info.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.SDKEventDispatcher.RegisterToEventNotification(OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register the given function to fire when the event occurs.
            </summary>
            <param name="funcToFire">The function to fire</param>
        </member>
        <member name="M:OmekFramework.Common.Main.SDKEventDispatcher.UnregisterToEventNotification(OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister the given function to fire when the event occurs.
            </summary>
            <param name="funcNotToFire">The function not to fire</param>
        </member>
        <member name="M:OmekFramework.Common.Main.SDKEventDispatcher.FireEvent(OmekFramework.Common.BasicTypes.CommonDefines.EventNotification)">
            <summary>
            Fire the event when it occurs.
            </summary>
            <param name="eventInfo">Information about the event occurrence</param>
        </member>
        <member name="E:OmekFramework.Common.Main.SDKEventDispatcher.OnEventFired">
            <summary>
            To fire when the event occurs.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.SDKEventDispatcher.Name">
            <summary>
            Name of the event
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.SDKEventDispatcher.MetaData">
            <summary>
            Represent all stateless information theat common for all instances of the event dispatcher
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.TrackedObjectCodedEventDispatcher">
            <summary>
            A per person coded event dispatcher, meant to be used when creating a coded event that works per person.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectCodedEventDispatcher.m_trackedObjectID">
            <summary>
            The person id on which this events works on.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectCodedEventDispatcher.GetClearedCopy">
            <summary>
            Get a new copy of this instance, with the MetaData ref (if available) copied.
            </summary>
            <returns>The copy</returns>
        </member>
        <member name="P:OmekFramework.Common.Main.TrackedObjectCodedEventDispatcher.TrackedObjectID">
            <summary>
            The person id on which this events works on.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.GestureEventDispatcher">
            <summary>
            Used to dipatch SDK gestures.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.GestureEventDispatcher.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.GestureEventDispatcher.UpdateState">
            <summary>
            Updates the state of the Gesture dispatcher.
            Checks if there are any new gestures in the SDK and fires an event for each one.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="T:OmekFramework.Common.Main.TrackedObjectMonitor">
            <summary>
            Monitors the states of the trackedObjects in the system and dispatches msgs to them.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectMonitor.m_trackedObjectsData">
            <summary>
            The current trackedObjects data. A mapping between the trackedObjects indices and their states.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectMonitor.m_trackedObjectsInSystem">
            <summary>
            The current trackedObjects in the system.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectMonitor.m_currentStateConditions">
            <summary>
            The current set trackedObject state conditions. Stating the trackedObject state conditions set for each trackedObject.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectMonitor.m_continueToUpdateTrackedObjectPositionType">
            <summary>
            A boolean indicating if there should continue an update of more trackedObject position types in this frame (there should be only change per frame to ease synchronization).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectMonitor.m_trackedObjectPresenceChangeInFrame">
            <summary>
            Indicates if there is a change in the trackedObject presence within this frame.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectMonitor.m_trackedObjectsLock">
            <summary>
            A lock used to lock the trackedObjects.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.GetPositionType(System.UInt32)">
            <summary>
            Get the position type for a trackedObject
            </summary>
            <param name="trackedObjectId">The trackedObject ID</param>
            <returns>The type of position the player is in</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.GetPositionTypeChangeTime(System.UInt32)">
            <summary>
            Get the last the position type of a trackedObject was changed
            </summary>
            <param name="trackedObjectId">The trackedObject ID</param>
            <returns>The time in seconds when the type of position of the player was changed. Returns 0 in case of an error.</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.GetInferredState(System.UInt32)">
            <summary>
            Get the inferred state for a trackedObject
            </summary>
            <param name="trackedObjectId">The trackedObject ID</param>
            <returns>The current system state inferred for the trackedObject</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.SetAllPositionConditions(System.Collections.Generic.Dictionary{System.String,OmekFramework.Common.Main.StateCondition})">
            <summary>
            Set new set of state conditions.
            </summary>
            <param name="trackedObjectStateConditions">The new state conditions</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.SetPositionCondition(System.String,OmekFramework.Common.Main.StateCondition)">
            <summary>
            apply a StateCondition to all trackedObjects
            </summary>
            <param name="conditionName">name of the condition</param>
            <param name="condition">the StateCondition to set</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.GetPositionCondition(System.String)">
            <summary>
            Get a StateCondition by name. 
            So it parameters may be changed for example.
            </summary>
            <param name="conditioneName">the name of the condition to get</param>
            <returns>the condition with the given name or null if no such condition exist</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.RegisterForTrackedObjectPositionChangeNotification(OmekFramework.Common.Main.TrackedObjectState.PositionTypeChangeHandler)">
            <summary>
            Register a handler for notification on a trackedObject that changed its type.
            </summary>
            <param name="trackedObjectler">The handler for the change</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.Reset">
            <summary>
            Reset the current TrackedObjectMonitor state.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.UpdateState">
            <summary>
            Update the current TrackedObjectMonitor state. Must be run to advance the state.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.ProcessTrackedObjectEnters">
            <summary>
            Process the entrance of candidates (new untracked trackedObject)
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.ProcessTrackedObjectEnters(System.UInt32)">
            <summary>
            Process a specific candidate (a new untracked trackedObject) enters.
            </summary>
            <param name="trackedObjectIndex">The entered candidate index</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.ProcessTrackedObjectLeaves">
            <summary>
            Process the exit of candidates (new untracked trackedObject)
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.ProcessTrackedObjectLeaves(System.UInt32)">
            <summary>
            Process a specific candidate (a new untracked trackedObject) exit.
            </summary>
            <param name="trackedObjectIndex">The exit candidate index</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.ProcessAlerts">
            <summary>
            Process the alerts.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.AssertTrackedObjectInSystem(System.UInt32)">
            <summary>
            If the given trackedObject is not in the system, add it.
            </summary>
            <param name="trackedObjectIndex">The trackedObject index to check</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.OnTrackedObjectPositionTypeChangedHandler(System.UInt32,OmekFramework.Common.Main.TrackedObjectState.PositionType,OmekFramework.Common.Main.TrackedObjectState.PositionType)">
            <summary>
            TrackedObjectler to fire on a change in the trackedObject position type.
            </summary>
            <param name="trackedObjectID">The trackedObject id that changed</param>
            <param name="newType">The new trackedObject position type</param>
            <param name="oldType">The old trackedObject position type</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.SetAllTrackedObjectPositionConditions(OmekFramework.Common.Main.TrackedObjectState)">
            <summary>
            Set trackedObject state conditions for a specific TrackedObjectState.
            </summary>
            <param name="bs">The TrackedObjectState for which to set the conditions</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.HasTrackedObjectsEntered(System.Collections.Generic.List{OmekFramework.Common.BasicTypes.CommonDefines.EventNotification}@)">
            <summary>
            Get list of candiadteEnters alerts from the SDK or if DontUseAlerts is true, by comparing lists of current and last frame trackedObjects
            </summary>
            <param name="trackedObjectNotifications">(Output)list of candiadteEnters alerts</param>
            <returns>true is there are new alerts</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectMonitor.HasTrackedObjectLeft(System.Collections.Generic.List{OmekFramework.Common.BasicTypes.CommonDefines.EventNotification}@)">
            <summary>
            Get list of candiadteLeave alerts from the SDK or if DontUseAlerts is true, by comparing lists of current and last frame trackedObjects
            </summary>
            <param name="trackedObjectNotifications">(Output)list of candiadteLeave alerts</param>
            <returns>true is there are new alerts</returns>
        </member>
        <member name="E:OmekFramework.Common.Main.TrackedObjectMonitor.OnTrackedObjectPositionTypeChanged">
            <summary>
            An event to fire when the trackedObject position type changed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:OmekFramework.Common.Main.TrackedObjectMonitor.IsControllingTracking" -->
        <!-- Badly formed XML comment ignored for member "P:OmekFramework.Common.Main.TrackedObjectMonitor.TrackedObjectsInSystem" -->
        <member name="P:OmekFramework.Common.Main.TrackedObjectMonitor.TrackedObjectPresenceChangeInFrame">
            <summary>
            Indicates if there is a change in the trackedObject presence within this frame.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.MovementRect">
            <summary>
            A data structure of 2D rectangle  meant to be placed relatively to another position.
            The rectangle dimensions and position are in arbitrary units meant to be used from the outside.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.MovementRect.Left">
            <summary>
            Left position of the rectangle
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.MovementRect.Top">
            <summary>
            Top position of the rectangle
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.MovementRect.Width">
            <summary>
            width of the rectangle
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.MovementRect.Height">
            <summary>
            height of the rectangle
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementRect.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:OmekFramework.Common.BasicTypes.MovementRect"/> class.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of <see cref="T:OmekFramework.Common.BasicTypes.MovementRect"/> class.
            </summary>
            <param name="left">The left position value</param>
            <param name="top">The top position value</param>
            <param name="width">The width of the rectangle</param>
            <param name="height">The height of the rectangle</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementRect.#ctor(OmekFramework.Common.BasicTypes.MovementRect)">
            <summary>
            copy constructor
            </summary>
            <param name="other">object to copy</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementRect.Contain(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Check id a 2D position is inside this MovementRect
            </summary>
            <param name="targetPosition">the 2D position</param>
            <returns>true iff targetPosition is inside this MovementBox</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementRect.ToString">
            <returns>string representation of the movementBox</returns>
        </member>
        <member name="T:OmekFramework.Common.Main.AlertEventDispatcher">
            <summary>
            Used to dispatch SDK alerts.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.AlertEventDispatcher.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.AlertEventDispatcher.UpdateState">
            <summary>
            Updates the state of the alert dispatcher.
            Checks if there are any new alerts in the SDK and fires an event for each one.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="T:OmekFramework.Common.Pointer.PointerLocker">
            <summary>
            interface of an object that may lock pointer movemnt
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.PointerLocker.GetLockPercent">
            <returns>the percent of movment allowd for the pointer</returns>
        </member>
        <member name="T:OmekFramework.Common.JointTransformers.JointPositionTransformer">
            <summary>
            Map a position of a joint of specific person to an application space
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.TrackedObjectID">
            <summary>
            The person to get the positions from
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.UsePlayerID">
            <summary>
            If true TrackedObjectID will be used as PlayerID, 
            the transformer will follow specific playerID even it is assigned to different Tracked Objects
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.SourceJoint">
            <summary>
            Which joint to get the position of
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.WorldBox">
            <summary>
            A box in world which bounds the position of the joint
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.TargetBox">
            <summary>
            A box in application space to map the position of the joint to
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.MinConfidenceValue">
            <summary>
            Minimum confidence the joint need to use it values
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.SmoothFactor">
            <summary>
            How much to smooth the movement. Smaller values mean stronger smoothing. Must be larger then 0
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.InvertXAxis">
            <summary>
            Should the X axis be inverted
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.InvertYAxis">
            <summary>
            Should the Y axis be inverted
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.InvertZAxis">
            <summary>
            Should the Z axis be inverted
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.m_smoother">
            <summary>
            The spring smoother used to smooth the value
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.m_lastTime">
            <summary>
            The last frame at which the value was updated
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.m_jointRelativeTo">
            <summary>
            The joint that this joint is relative to.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointPositionTransformer.m_currentValue">
            <summary>
            The current joint value.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.SetBoxRelativeToJoint(Omek.JointID)">
            <summary>
            Set a joint that the World box is realtive to.
            </summary>
            <param name="in_jointRelativeTo">the joint the box will be relative to</param>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.SetBoxToAbsoluteCoordinates">
            <summary>
            Set the world box to be in absolute world coordiante system. This is also the default
            </summary>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.UpdateState">
            <summary>
            Update the CurrentValue
            </summary>
            <returns>ResturnCode representing the status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.RecenterOnWorldPosition(System.Boolean,System.Boolean)">
            <summary>
            Center the world box so the current position will be te center of the new box
            </summary>
            <param name="updateTargetBox">should the TargetBox be updated accordingly so the CurrentValue will stay in place</param>
            <param name="smoothChange">should the change in position be smoothed or should it happen abruptly</param>
            <returns>Return code that represents the status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.RecenterOnTargetPosition(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Boolean)">
            <summary>
            Center the world box so the CurrentValue will be at targetPosition
            </summary>
            <param name="targetPosition">the wanted position for CurrentValue, must be inside TargetBox</param>
            <param name="smoothChange">should the change in position be smoothed or should it happen abruptly</param>
            <returns>Return code that represent the status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.GetRelativePosition(OmekFramework.Common.BasicTypes.MovementBox,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Calculate the relative position of a point in a box.
            The return position is clamped to the range [0,1]
            </summary>
            <param name="box">the box</param>
            <param name="position">the positon to calculate</param>
            <returns>the relative position of a the point relative box</returns>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.GetAbsolutePosition(OmekFramework.Common.BasicTypes.MovementBox,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Calculate the absolute position of a reltaive position  to a box
            </summary>
            <param name="box">the box</param>
            <param name="relativePosition">the relative position</param>
            <returns>absolute position of relativePosition to a box</returns>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.SetInitialPosition(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Set the current position of the trandformer,
            useful to smooth the position starting from a current value.
            </summary>
            <param name="position">the given position</param>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointPositionTransformer.GetPositions(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@)">
            <summary>
            Get the current world position and target position
            </summary>
            <param name="worldPosition">(output) the current position in the world</param>
            <param name="targetPosition">(output) the current target position</param>
            <returns>Return code that represents the status of the run</returns>
        </member>
        <member name="P:OmekFramework.Common.JointTransformers.JointPositionTransformer.CurrentValue">
            <summary>
            The current position in application space
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.MathHelpers">
            <summary>
            Provide useful Math utilities
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.MathHelpers.EPSILON">
            <summary>
            A very small number.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Lineary interpolates between from and to, where the relative position between them is determined by ratio.
            </summary>
            <param name="from">Where the number range starts</param>
            <param name="to">Where the number range ends</param>
            <param name="ratio">Where we are placed within the number range</param>
            <returns>The linear interpolation</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.UnclampedInverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Inverse lineary interpolation which is not clamped (i.e. if the value is out of range you can get a number lower than 0 or higher than 1).
            </summary>
            <param name="from">Where the number range starts</param>
            <param name="to">Where the number range ends</param>
            <param name="val">The value within the number range</param>
            <returns>Where val is placed in the number range defined by from and to</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
            Inverse lineary interpolation that is clamped (i.e. if the value is always between 0 and 1).
            </summary>
            <param name="from">Where the number range starts</param>
            <param name="to">Where the number range ends</param>
            <param name="val">The value within the number range</param>
            <returns>Where val is placed in the number range defined by from and to</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps val between min and max
            </summary>
            <param name="val">The value to clamp</param>
            <param name="min">Minimum value for val</param>
            <param name="max">Maximum value for val</param>
            <returns>The clamped value</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.MoveTowards(System.Double,System.Double,System.Double)">
            <summary>
            Moves a value current towards target.
            Performs linear interpolation and makes sure the speed does not exceed maxDistanceDelta.
            Negative values of maxDistanceDelta pushes the value away from target.
            </summary>
            <param name="current">The current value</param>
            <param name="target">The target value</param>
            <param name="maxDistanceDelta">The maximum distance to pass</param>
            <returns>The value moved to</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Moves a value current towards target.
            Performs linear interpolation and makes sure the speed does not exceed maxDistanceDelta.
            Negative values of maxDistanceDelta pushes the value away from target.
            </summary>
            <param name="current">The current value</param>
            <param name="target">The target value</param>
            <param name="maxDistanceDelta">The maximum distance to pass</param>
            <returns>The value moved to</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.UnclampedLerp(System.Single,System.Single,System.Single)">
            <summary>
            Lineary interpolates between from and to, where the relative position between them is determined by ratio.
            Values higher then 1 or lower then 0 will result in values outside the range
            </summary>
            <param name="from">Where the number range starts</param>
            <param name="to">Where the number range ends</param>
            <param name="ratio">Where we are placed within the number range</param>
            <returns>The linear interpolation</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.Sum(System.Collections.Generic.ICollection{System.Single})">
            <summary>
            return the sum of all elements in a collection of floats
            </summary>
            <param name="floatCollection">the float collection</param>
            <returns>sum of all elements in the collection</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.SquaredSum(System.Collections.Generic.ICollection{System.Single})">
            <summary>
            return the sum of all elements in a collection of floats - squered
            </summary>
            <param name="floatCollection">the float collection</param>
            <returns>squered sum of all elements in the collection</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.Average(System.Collections.Generic.ICollection{System.Single})">
            <summary>
            return the average of all elements in a collection of floats
            </summary>
            <param name="floatCollection">the float collection</param>
            <returns>average of all elements in the collection</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.MathHelpers.WeightedAverage(System.Collections.Generic.ICollection{System.Single},System.Single[])">
            <summary>
            return the weighted average of all elements in a collection of floats
            </summary>
            <param name="floatCollection">the float collection</param>
            <param name="weightArray">the weights to use for the average calculation</param>
            <returns>weighted average of all elements in the collection</returns>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.CommonDefines">
            <summary>
            Common definitions to be used in the Framework.
            These definitions also hold common types of the Beckon and Grasp SDKs.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.UNINITIALIZED_INT_VALUE">
            <summary>
            Default uninitialized value for the int type.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.UNINITIALIZED_UINT_VALUE">
            <summary>
            Default uninitialized value for the uint type.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.UNINITIALIZED_ULONG_VALUE">
            <summary>
            Default uninitialized value for the ulong type.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.UNINITIALIZED_FLOAT_VALUE">
            <summary>
            Default uninitialized value for the float type.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.UNINITIALIZED_VECTOR3_VALUE">
            <summary>
            Default uninitialized value for the Vector3 type.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.UNINITIALIZED_VECTOR2_VALUE">
            <summary>
            Default uninitialized value for the Vector2 type.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.UNINITIALIZED_QUATERNION_VALUE">
            <summary>
            Default uninitialized value for the Quaternion type.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.CommonDefines.ReportErrorToConsole(OmekFramework.Common.BasicTypes.ReturnCode)">
            <summary>
            Write a ReturnCode directly to the Debug Console.
            </summary>
            <param name="rc">The ReturnCode indicating the error</param>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat">
            <summary>
            Holds the format of the image gathered from the SDK.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.m_iType">
            <summary>
            The type of the image (color/depth/mask).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.m_bpc">
            <summary>
            Bytes per channel
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.m_channels">
            <summary>
            Image channels.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.m_width">
            <summary>
            Image width
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.m_height">
            <summary>
            Image height
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.m_widthStep">
            <summary>
            Byte width of a single line in the image buffer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.m_bufferSize">
            <summary>
            Size of the image buffer.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.#ctor(Omek.ImageType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            The format of the image.
            </summary>
            <param name="in_iType">The type of the image (color/depth/mask).</param>
            <param name="in_bpc">Bit per channel</param>
            <param name="in_channels">Image channels.</param>
            <param name="in_width">Image width</param>
            <param name="in_height">Image height</param>
            <param name="in_widthStep">Byte width of a single line in the image buffer</param>
            <param name="in_bufferSize">Size of the image buffer.</param>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat.UninitializedFormat">
            <summary>
            Returns an uninitialized ImageFormat constant.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.CommonDefines.ImageData">
            <summary>
            Holds the a byte array holding camera image data.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageData.m_dataArr">
            <summary>
            Byte array containing the image data.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.ImageData.m_dataLocker">
            <summary>
            A lock to lock the data.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification">
            <summary>
            A class meant to provide information about an event occurrence (where an event is a Gesture or an Alert occurrence).
            All types are readonly, as once it is constructed, it can never change.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.EventType">
            <summary>
            Is the event a Gesture event or an Alert event
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.EventName">
            <summary>
            The event's name (the type of gesture, or type of alert).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.TrackedObjectID">
            <summary>
            The ID of the person for whom the event was issued.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.UniqueID">
            <summary>
            The unique ID of the event
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.FrameNumber">
            <summary>
            The SDK frame number in which the event was detected.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.TimeStamp">
            <summary>
            The time in which the event was was detected.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.ExtraInformation">
            <summary>
            A point to some extra information the a user might want to add to the event info.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.#ctor(OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.EventNotificationType,System.String,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.Object)">
            <summary>
            Constructor of the EventNotification
            </summary>
            <param name="in_eventType">Is the event a Gesture event or an Alert event</param>
            <param name="in_eventName">The event's name (the type of gesture, or type of alert).</param>
            <param name="in_personID">The ID of the person for whom the event was issued</param>
            <param name="in_uniqueID">The unique ID of the event</param>
            <param name="in_frameNumber">The SDK frame number in which the event was detected.</param>
            <param name="in_timeStamp">The time in which the event was was detected.</param>
            <param name="in_extraInformation"> A point to some extra information the a user might want to add to the event info.</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.GetInvalidEvent">
            <summary>
            Get an instance of what is defined as an "Invalid" event.
            </summary>
            <returns></returns>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.CommonDefines.EventNotification.EventNotificationType">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.ISkeleton">
            <summary>
            High Level API wrapper of getting  positions, rotations and confidence
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.ISkeleton.Item(Omek.JointID)">
            <summary>
            Indexer to a Joint according to a joint id.
            </summary>
            <param name="jointID">The joint id for which to get the Joint</param>
            <returns>The corresponding Joint</returns>
        </member>
        <member name="T:OmekFramework.Common.Data.IJoint">
            <summary>
            Represents a single skeleton Joint
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.IJoint.Confidence">
            <summary>
            The joint's confidence
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.IJoint.Position">
            <summary>
            The joint's position
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.IJoint.Rotation">
            <summary>
            The joint's rotation
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.IJointPosition">
            <summary>
            Wraps the position of a joint
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.IJointPosition.Image">
            <summary>
            Gets the image spaced position
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.IJointPosition.World">
            <summary>
            Gets the world spaced position
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.IJointRotation">
            <summary>
            Wraps the rotation of a joint
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.IJointRotation.Global">
            <summary>
            The local rotation
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.IJointRotation.Local">
            <summary>
            Gets the global rotation
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.IJointRotationGetter">
            <summary>
            Allows the acquirement of joint's rotation
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.IJointRotationGetter.Get(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion@)">
            <summary>
            Gets the rotation
            </summary>
            <param name="outRot">(output) the out rotation</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Data.IJointRotationGetter.Get(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@)">
            <summary>
            Gets the rotation as Euler angles
            </summary>
            <param name="outRot">(output) the out rotation as Euler angles</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="T:OmekFramework.Common.Data.IJointConfidenceGetter">
            <summary>
            Allows the acquirement of joint's confidence
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.IJointConfidenceGetter.Get(System.UInt32@)">
            <summary>
            Gets the confidence
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.TrackedObjectState">
            <summary>
            Indicates the TrackedObjectState
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectState.m_trackedObjectInferredState">
            <summary>
            The inferred trackedObject state inferred after some logic in the UpdateState.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectState.m_trackedObjectStateConditions">
            <summary>
            The trackedObject's TrackedObjectPositionConditions
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectState.m_trackedObjectID">
            <summary>
            The trackedObject ID
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectState.m_trackedObjectPositionType">
            <summary>
            The TrackedObject position type that takes into account the current information of the trackedObject.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.TrackedObjectState.m_lastPositionTypeUpdateTime">
            <summary>
            Last time the trackedObject's position type was updated.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.#ctor(System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="trackedObjectID">Indicates the trackedObject's trackedObjectID</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.UpdateState(System.Boolean,System.Boolean)">
            <summary>
            Updates the trackedObject's state. Must be run to advance it's state.
            </summary>
            <param name="inSystem">Is the trackedObject is currently in the system</param>
            <param name="updateTrackedObjectPositionTypeValue">Should the position type change and notification be done</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.RegisterForTrackedObjectPositionTypeChangeNotification(OmekFramework.Common.Main.TrackedObjectState.PositionTypeChangeHandler)">
            <summary>
            Register a handler for notification on a change in the trackedObject type.
            </summary>
            <param name="handler">The handler for the change</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.SetTrackedObjectPositionCondition(System.String,OmekFramework.Common.Main.StateCondition)">
            <summary>
            Set a trackedObject state condition.
            Overrides an other condition if it exists by the same given name.
            </summary>
            <param name="conditionName">The condition name (should be unique if the previous condition by the same name is not meant to be overridden)</param>
            <param name="trackedObjectStateCondition">The trackedObject state condition</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.RemoveTrackedObjectPositionCondition(System.String)">
            <summary>
            Remove a trackedObject state condition by the given name.
            </summary>
            <param name="trackedObjectStateConditionName">The trackedObject state condition name to remove</param>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.ClearAllTrackedObjectPositionConditions">
            <summary>
            Clear all the trackedObject state conditions.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.GetTrackedObjectPositionTypeChangeTime">
            <summary>
            get the time the trackedObject position type changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.SkeletonEnters">
            <summary>
            Handle TrackedObject with skeleton enters
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.SkeletonLeaves">
            <summary>
            Handle TrackedObject with skeleton leaves
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.TrackedObjectEnters">
            <summary>
            Handle trackedObject enters
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.TrackedObjectLeaves">
            <summary>
            Handle trackedObject leave
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.UpdateTrackedObjectTrackingMode">
            <summary>
            Update the current trackedObject tracking mode from the BeckonModule.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.UpdateTrackedObjectInfferedState">
            <summary>
            Update the current trackedObject InfferedState from the BeckonModule.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.ResetTrackedObjectStatesConditions">
            <summary>
            Reset the trackedObject state conditions?
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.TrackedObjectState.UpdateTrackedObjectPositionType(System.Boolean)">
            <summary>
            Update the trackedObject position type.
            </summary>
            <param name="updateTrackedObjectPositionTypeValue">Should any change in the position type update the trackedObject state and have it notified?</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="E:OmekFramework.Common.Main.TrackedObjectState.OnTrackedObjectPositionTypeChanged">
            <summary>
            Event that gets fired when a trackedObject's position type changes.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.TrackedObjectState.TrackedObjectID">
            <summary>
            The trackedObject ID
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.TrackedObjectState.TrackedObjectInferredState">
            <summary>
            The inferred trackedObject state inferred after some logic in the UpdateState.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.TrackedObjectState.TrackedObjectPositionType">
            <summary>
            The TrackedObject position type that takes into account the current information of the trackedObject.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.TrackedObjectState.PositionTypeChangeHandler">
            <summary>
            Delegate for trackedObject position type changes
            </summary>
            <param name="trackedObjectID">The ID of the trackedObject that changed</param>
            <param name="newType">The new position type</param>
            <param name="oldType">The old position type</param>
        </member>
        <member name="T:OmekFramework.Common.Main.TrackedObjectState.InferredState">
            <summary>
            Describes the trackedObject state. It is ordered in a manner such that a higher value indicates a trackedObject that is closer to be tracked.
            This order must be kept.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.TrackedObjectState.PositionType">
            <summary>
            The different categorizations of positions that a trackedObject can be in
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.IPlayerSelection.IsPlayer(System.Int32)">
            <summary>
            Returns true if the tracked object index given is a player in the system.
            </summary>
            <param name="trackedObjectIndex">The tracked object index</param>
            <returns>True if the tracked object index given is a player in the system.</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.IPlayerSelection.IsPointerControlling(System.Int32)">
            <summary>
            Returns true if the tracked object index given is controlling a pointer.
            </summary>
            <param name="trackedObjectIndex">The tracked object index</param>
            <returns>True if the tracked object index given is controlling a pointer.</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.IPlayerSelection.PlayerIdOfTrackedObjectId(System.Int32)">
            <summary>
            Get the player logical index for a tracked object
            </summary>
            <param name="trackedObjectIndex">The tracked object index</param>
            <returns>The matching logical ID (NON_ASSIGNED_PLAYER if none)</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.IPlayerSelection.TrackedObjectIdOfPlayerId(System.Int32)">
            <summary>
            Get the tracked object index of a logical player index
            </summary>
            <param name="playerIndex">The ID of the logical player</param>
            <returns>The matching tracked object index</returns>
        </member>
        <member name="P:OmekFramework.Common.Main.IPlayerSelection.ExpectedPlayerCount">
            <summary>
            Get the number of player wanted by the current selection strategy
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.IPlayerSelection.IsAssignedAsExpected">
            <summary>
            Do all needed player have an assigned tracked object
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.IPlayerSelection.PlayerCount">
            <summary>
            Get the number of players that have actual tracked object assigned to them
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.IPlayerSelection.PlayerIds">
            <summary>
            Get an enumeration of the players which are assigned to tracked objects
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.IPlayerSelection.PointerControllingTrackedObjects">
            <summary>
            Get an enumeration of tracked objects controlling a pointer
            </summary>
        </member>
        <member name="T:OmekFramework.Common.JointTransformers.JointImagePositionTransformer">
            <summary>
            Map am image position of a joint of specific person to an application space
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.TrackedObjectID">
            <summary>
            The person to get the positions from
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.UsePlayerID">
            <summary>
            If true TrackedObjectID will be used as PlayerID, 
            the transformer will follow specific playerID even it is assigned to different Tracked Objects
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.SourceJoint">
            <summary>
            Which joint to get the position of
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.ImageRect">
            <summary>
            A box in world which bounds the position of the joint
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.TargetRect">
            <summary>
            A box in application space to map the position of the joint to
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.MinConfidenceValue">
            <summary>
            Minimum confidence the joint need to use it values
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.SmoothFactor">
            <summary>
            How much to smooth the movement. Smaller values mean stronger smoothing. Must be larger then 0
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.InvertXAxis">
            <summary>
            Should the X axis be inverted
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.InvertYAxis">
            <summary>
            Should the Y axis be inverted
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.m_smoother">
            <summary>
            The spring smoother used to smooth the value
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.m_lastTime">
            <summary>
            The last frame at which the value was updated
            </summary>
        </member>
        <member name="F:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.m_currentValue">
            <summary>
            The current joint value.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.UpdateState">
            <summary>
            Update the CurrentValue
            </summary>
            <returns>ResturnCode representing the status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.GetRelativePosition(OmekFramework.Common.BasicTypes.MovementRect,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Calculate the relative position of a point in a rect.
            The return position is clamped to the range [0,1]
            </summary>
            <param name="box">the box</param>
            <param name="position">the position to calculate</param>
            <returns>the relative position of a the point relative box</returns>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.GetAbsolutePosition(OmekFramework.Common.BasicTypes.MovementRect,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Calculate the absolute position of a relative position  to a rect
            </summary>
            <param name="box">the box</param>
            <param name="relativePosition">the relative position</param>
            <returns>absolute position of relativePosition to a box</returns>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.SetInitialPosition(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Set the current position of the transformer,
            useful to smooth the position starting from a current value.
            </summary>
            <param name="position">the given position</param>
        </member>
        <member name="M:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.GetPositions(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2@,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2@)">
            <summary>
            Get the current image position and target position
            </summary>
            <param name="worldPosition">(output) the current position in the image</param>
            <param name="targetPosition">(output) the current target position</param>
            <returns>Return code that represents the status of the run</returns>
        </member>
        <member name="P:OmekFramework.Common.JointTransformers.JointImagePositionTransformer.CurrentValue">
            <summary>
            The current position in application space
            </summary>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.ReturnCode">
            <summary>
            Represents a return code to be returned within most types within the framework.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.ReturnCode.m_frameworkReturnCode">
            <summary>
            The framework return code (may be a return code representing an Ok status. In which case there is no framework error, which means there is also no SDK error).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.ReturnCode.m_SDKReturnCode">
            <summary>
            The SDK return code (may be a return code representing an Ok status. In which case there is no SDK error).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.ReturnCode.OK_Status">
            <summary>
            Used to return an OK status.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.ReturnCode.#ctor(System.UInt32)">
            <summary>
            Constructor used to build a return code where there's a possible error in the SDK.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.ReturnCode.#ctor(Omek.OMKStatus)">
            <summary>
            Constructor used to build a return code where there's a possible error in the SDK.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.ReturnCode.#ctor(OmekFramework.Common.BasicTypes.ReturnCode.FrameworkReturnCodes)">
            <summary>
            Constructor used to build a return code where there's an error in the framework not caused by an error in the sdk.
            </summary>
            <param name="frameworkReturnCode">A framework return code to indicate the error</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.ReturnCode.#ctor(OmekFramework.Common.BasicTypes.ReturnCode.FrameworkReturnCodes,Omek.OMKStatus)">
            <summary>
            Constructor used to build a return code where there's an error in the framework caused by an error in the sdk.
            </summary>
            <param name="frameworkReturnCode">A framework return code to indicate the error</param>
            <param name="sdkReturnCode">An SDK return code to indicate the error</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.ReturnCode.#ctor(OmekFramework.Common.BasicTypes.ReturnCode.FrameworkReturnCodes,System.UInt32)">
            <summary>
            Constructor used to build a return code where there's an error in the framework caused by an error in the sdk.
            </summary>
            <param name="frameworkReturnCode">A framework return code to indicate the error</param>
            <param name="sdkReturnCode">An SDK return code to indicate the error in uint form</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.ReturnCode.IsError">
            <summary>
            Returns true if there is any framework error. If status is OK then there is also no SDK error.
            </summary>
            <returns>True if there is any framework error</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.ReturnCode.IsErrorInSDK">
            <summary>
            Returns true if there is any error in the SDK.
            </summary>
            <returns>True if there is any SDK error</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.ReturnCode.ToString">
            <summary>
            A nice representation of the string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.ReturnCode.FrameworkReturnCode">
            <summary>
            The framework return code (may be a return code representing an Ok status. In which case there is no framework error, which means there is also no SDK error).
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.ReturnCode.SDKReturnCode">
            <summary>
            The SDK return code (may be a return code representing an Ok status. In which case there is no SDK error).
            </summary>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.ReturnCode.FrameworkReturnCodes">
            <summary>
            Represents a return code describing the error code encountered within the framework.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.StateCondition">
            <summary>
            A coded condition determining a severity that one gets for that condition.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.StateCondition.m_statePercent">
            <summary>
            A float indicating how close to the state condition
            0 being not close at all.
            1 being totally in the condition.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.StateCondition.m_goodSeverityPercentThreshold">
            <summary>
            The threshold for the good severity.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.StateCondition.m_warningSeverityPercentThreshold">
            <summary>
            The threshold for the warning severity.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.StateCondition.m_currentStateSeverity">
            <summary>
            The current state severity.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.StateCondition.m_trackedObject">
            <summary>
            The person to which the condtion refers to
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.StateCondition.m_name">
            <summary>
            The condition's name.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.StateCondition.m_stateStartTime">
            <summary>
            The time at which the current state severity was set.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.StateCondition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.StateCondition.Reset">
            <summary>
            Resets the condition.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.StateCondition.UpdateState">
            <summary>
            Updates the condition.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.StateCondition.SetConditionParameters(System.Single,System.Single)">
            <summary>
            Set the state condition percent thresholds
            </summary>
            <param name="in_goodSeverityPercentThreshold">The threshold below which the severity will be set to good</param>
            <param name="in_warningSeverityPercentThreshold">The threshold below which the severity will be set to warning and above to bad</param>
        </member>
        <member name="M:OmekFramework.Common.Main.StateCondition.SetConditionSeverity">
            <summary>
            Set the condition severity according to the m_statePercent
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.StateCondition.Clone">
            <summary>
            Clones this object and returns it.
            </summary>
            <returns>The clone of this object</returns>
        </member>
        <member name="P:OmekFramework.Common.Main.StateCondition.Name">
            <summary>
            The condition's name.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.StateCondition.StateStartTime">
            <summary>
            The time at which the current state severity was set.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.StateCondition.StatePercent">
            <summary>
            A float indicating how close to the state condition
            0 being not close at all.
            1 beging totally in the condition.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.StateCondition.CurrentStateSeverity">
            <summary>
            The current state severity.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.StateCondition.TrackedObject">
            <summary>
            The person to which the condtion refers to
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.StateCondition.ConditionSeverity">
            <summary>
            Severities of a condition.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.Alerts">
            <summary>
            An interface for all alert related capabilities of the framework
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.Alerts.m_eventNotifier">
            <summary>
             Responsible on the actual work this class does, by registration, updating and dispatching events.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.UpdateState">
            <summary>
            Update the state of the alert system - this must be used to get current alerts and discard the previous alerts.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.EnableSDKAlert(Omek.AlertEventType)">
            <summary>
            Enable the specified sdk alert.
            </summary>
            <param name="alert">The alert</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.DisableSDKAlert(Omek.AlertEventType)">
            <summary>
            Disable the specified sdk alert.
            </summary>
            <param name="alert">The alert</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.AddCodedAlert``1(System.String)">
            <summary>
            Add a new coded alert.
            An instance of this coded alert will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system. Note that all reference types in the coded alert will be copied by default unless otherwise overriden in the type.
            </summary>
            <typeparam name="T">The type of the coded alert</typeparam>
            <param name="alertName">The name to use as the identifier of the coded alert</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.AddCodedAlert(System.Type,System.String)">
            <summary>
            Add a new coded alert.
            An instance of this coded alert will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system. Note all reference types in the coded alert will be copied by default unless otherwise overriden in the type.
            </summary>
            <param name="SDKEventDispatcherType">The type of the coded alert. Must be derived from SDKEventDispatcher</param>
            <param name="alertName">The name to use as the identifier of the coded alert</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.AddCodedAlert``1(System.String,OmekFramework.Common.Main.SDKEventDispatcher.MetaData)">
            <summary>
            Add a new coded alert.
            An instance of this coded alert will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system, all sharing the given metaData object. Note that apart from the explicit meta data object
            all other reference types in the coded alert will be copied by default unless otherwise overriden in the type.
            </summary>
            <typeparam name="T">The type of the coded alert</typeparam>
            <param name="alertName">The name to use as the identifier of the coded alert</param>
            <param name="metaData">Meta data object to be shared by generated instances of the coded alert. Note that if there is no constructor in the coded alert
            with the MetaData or type that derived from it, it will be constructed with no meta data.</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.AddCodedAlert(System.Type,System.String,OmekFramework.Common.Main.SDKEventDispatcher.MetaData)">
            <summary>
            Add a new coded alert.
            An instance of this coded alert will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system, all sharing the given metaData object. Note that apart from the explicit meta data object
            all other reference types in the coded alert will be copied by default unless otherwise overriden in the type.
            </summary>
            <param name="SDKEventDispatcherType">The type of the coded event. Must be derived from SDKEventDispatcher</param>
            <param name="alertName">The name to use as the identifier of the coded alert</param>
            <param name="metaData">Meta data object to be shared by generated instances of the coded alert. Note that if there is no constructor in the coded alert
            with the MetaData or type that derived from it, it will be constructed with no meta data.</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.RemoveCodedAlert(OmekFramework.Common.Main.SDKEventDispatcher)">
            <summary>
            Remove the coded alert to the detected alerts.
            </summary>
            <param name="codedAlertToRemove">The alert to stop detecting</param>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.RemoveCodedAlert(System.String)">
            <summary>
            Remove the coded alert to the detected alerts.
            </summary>
            <param name="codedAlertToRemove">The alert to stop detecting</param>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.RemoveCodedAlert``1">
            <summary>
            Remove the coded alert to the detected alerts.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.GetCodedAlertOfTrackedObject(System.UInt32,System.String)">
            <summary>
            finds codedEventDispather of a specific alert and specific TrackedObject
            </summary>
            <param name="trackedObjectID">ID of the TrackedObject</param>
            <param name="alertName">the alert name</param>
            <returns>codedEventDispather of coresponding to alertName and trackedObjectID</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive``1">
            <summary>
            Check if the coded alert is active.
            </summary>
            <typeparam name="T">The coded alert type to check</typeparam>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive``1(System.Collections.Generic.List{OmekFramework.Common.BasicTypes.CommonDefines.EventNotification}@)">
            <summary>
            Check if the coded alert is active and if so return info on all of the alert occurrences in the last frame.
            </summary>
            <typeparam name="T">The coded alert type to check</typeparam>
            <param name="alertoccurrences">(output) all the occurrences of the alert.</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive">
            <summary>
            Check if any alert is active.
            </summary>
            <returns>True if any alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive(System.String)">
            <summary>
            Check if an alert is active by name.
            </summary>
            <param name="alertName">The alert name to check</param>
            <returns>True if the alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive(System.String,System.Collections.Generic.List{OmekFramework.Common.BasicTypes.CommonDefines.EventNotification}@)">
            <summary>
            Check if the alert is active by name and if so return info on all of the alert occurrences in the last frame.
            </summary>
            <param name="alertName">The alert name to check</param>
            <param name="alertoccurrences">(output) all the occurrences of the alert.</param>
            <returns>True if the alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive(System.String,System.UInt32,OmekFramework.Common.BasicTypes.CommonDefines.EventNotification@)">
            <summary>
            Check if the alert is active accroding to the entered personID and alert name and get information on the alert occurrence.
            </summary>
            <param name="alertName">The alert name to check</param>
            <param name="trackedObjectID">The person id to check</param>
            <param name="alertoccurrence">The occurrence details of the alert</param>
            <returns>True if the alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive(System.String,System.UInt32)">
            <summary>
            Check if the alert is active accroding to the entered personID and alert name.
            </summary>
            <param name="alertName">The alert name to check</param>
            <param name="trackedObjectID">The person id to check</param>
            <returns>True if the alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.RegisterOnAlert(System.String,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register to call the given OnSDKEvent function if any occurrence of the specified alert occurres.
            The OnEvent function will be called for each occurrence of the alert and for each person.
            </summary>
            <param name="alertName">The name of the alert for which the OnSDKEvent should be fired </param>
            <param name="onAlert">The OnSDKEvent that should be fired</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.RegisterOnAlert(System.String,System.UInt32,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register to call the given OnSDKEvent function if any occurrence of the specified alert occurres for the specified person.
            The OnEvent function will be called for each occurrence of the alert for the specified person.
            </summary>
            <param name="alertName">The name of the alert for which the OnSDKEvent should be fired</param>
            <param name="trackedObjectID">The person ID for which the event should be fired</param>
            <param name="onAlert">The OnSDKEvent that should be fired</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.UnregisterOnAlert(System.String,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister the given OnSDKEvent function for the specified alert.
            </summary>
            <param name="alertName">The name of the alert for which the OnSDKEvent shouldn't be fired</param>
            <param name="onAlert">The OnSDKEvent that shouldn't be fired</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.UnregisterOnAlert(System.String,System.UInt32,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister the given OnSDKEvent function for the specified person for the specified alert.
            </summary>
            <param name="alertName">The name of the alert for which the OnSDKEvent shouldn't be fired</param>
            <param name="trackedObjectID">The person id for which not to fire the event no more</param>
            <param name="onAlert">The OnSDKEvent that shouldn't be fired</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive(Omek.AlertEventType)">
            <summary>
            Check if the alert is active.
            </summary>
            <param name="alertName">The SDK alert to check</param>
            <returns>True if the alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive(Omek.AlertEventType,System.Collections.Generic.List{OmekFramework.Common.BasicTypes.CommonDefines.EventNotification}@)">
            <summary>
            Check if the alert is active and if so return info on all of them.
            </summary>
            <param name="alertName">The SDK alert to check</param>
            <param name="alertoccurrences">(output) all the occurrences of the alert.</param>
            <returns>True if the alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive(Omek.AlertEventType,System.UInt32,OmekFramework.Common.BasicTypes.CommonDefines.EventNotification@)">
            <summary>
            Check if the alert is active according to the entered personID and get information on the alert occurrence.
            </summary>
            <param name="alertName">The SDK alert to check</param>
            <param name="trackedObjectID">The person id to check</param>
            <param name="alertoccurrence">The occurrence details of the alert</param>
            <returns>True if the alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.IsAlertActive(Omek.AlertEventType,System.UInt32)">
            <summary>
            Check if the alert is active according to the entered personID.
            </summary>
            <param name="alertName">The SDK alert to check</param>
            <param name="trackedObjectID">The person id to check</param>
            <returns>True if the alert is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.RegisterOnAlert(Omek.AlertEventType,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register to call the given OnSDKEvent function if any occurrence of the specified alert occurres.
            The OnEvent function will be called for each occurrence of the alert and for each person.
            </summary>
            <param name="alertName">The alert for which the OnSDKEvent should be fired </param>
            <param name="onAlert">The OnSDKEvent that should be fired</param>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.RegisterOnAlert(Omek.AlertEventType,System.UInt32,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register to call the given OnSDKEvent function if any occurrence of the specified alert occurres for the specified person.
            The OnEvent function will be called for each occurrence of the alert for the specified person.
            </summary>
            <param name="alertName">The alert for which the OnSDKEvent should be fired</param>
            <param name="trackedObjectID">The person ID for which the event should be fired</param>
            <param name="onAlert">The OnSDKEvent that should be fired</param>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.UnregisterOnAlert(Omek.AlertEventType,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister the given OnSDKEvent function for the specified alert.
            </summary>
            <param name="alertName">The for which the OnSDKEvent shouldn't be fired</param>
            <param name="onAlert">The OnSDKEvent that shouldn't be fired</param>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.UnregisterOnAlert(Omek.AlertEventType,System.UInt32,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister the given OnSDKEvent function for the specified person for the specified alert.
            </summary>
            <param name="alertName">The alert for which the OnSDKEvent shouldn't be fired</param>
            <param name="trackedObjectID">The person id for which not to fire the event no more</param>
            <param name="onAlert">The OnSDKEvent that shouldn't be fired</param>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.GetCurrentAlertsCopy">
            <summary>
            Returns the a copy of all the current alerts.
            </summary>
            <returns>A copy of all current alerts</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Alerts.CurrentAlertNames">
            <summary>
            Returns all current alert names.
            </summary>
            <returns>All current alert names</returns>
        </member>
        <member name="P:OmekFramework.Common.Main.Alerts.Instance">
            <summary>
            A singleton instance.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Pointer.PointerAction">
            <summary>
            Available actions that the OS pointer can perform
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.PointerAction.LeftClick">
            <summary>
            Pointer left click
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.PointerAction.RightClick">
            <summary>
            Pointer right click
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.PointerAction.MiddleClick">
            <summary>
            Pointer middle click
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.PointerAction.DoubleClick">
            <summary>
            Pointer double click
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.PointerAction.LeftDown">
            <summary>
            Pointer left down
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.PointerAction.LeftUp">
            <summary>
            Pointer left up
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Pointer.OSPointer">
            <summary>
            A class used to inject pointer values into the OS pointer.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.mouse_event(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a mouse event with the given parameters
            </summary>
            <param name="dwFlags">dwFlags</param>
            <param name="dx">dx</param>
            <param name="dy">dy</param>
            <param name="dwData">dwData</param>
            <param name="dwExtraInfo">dwExtraInfo</param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            Set the pointer position
            </summary>
            <param name="X">The X pointer position</param>
            <param name="Y">The Y pointer position</param>
            <returns>Success of run</returns>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.m_gesturesToActionsDictionary">
            <summary>
            A mapping between gestures performed by the pointer controlling person to the pointer actions that they should activate
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.m_pointer">
            <summary>
            The current pointer controlling the OS pointer (null if none).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.m_screenWidth">
            <summary>
            The screen width
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.m_screenHeight">
            <summary>
            The screen height
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.m_leftCornerPosition">
            <summary>
            The X position of the left  corner of the application mouse area
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.m_topCornerPosition">
            <summary>
            The X position of the left  corner of the application mouse area
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.PairPointerToCursor(OmekFramework.Common.Pointer.Pointer)">
            <summary>
            Pairs an actual pointer to the OS cursor
            </summary>
            <param name="pointer">The pointer to pair to the OS cursor</param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.UnpairPointerToCursor">
            <summary>
            Set no pointer to control the cursor
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.UpdateOSPointer">
            <summary>
            Call this method from the pointer code to update the OS pointer according to the given pointer.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.RegisterGestureToPointerAction(System.String,OmekFramework.Common.Pointer.PointerAction)">
            <summary>
            Invoke the specified pointer action when the specified gesture occurs.
            </summary>
            <param name="gestureName">The gesture which invokes the pointer action</param>
            <param name="pa">The pointer action (left click, right click, etc.) to invoke</param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.UnregisterGesture(System.String)">
            <summary>
            Unregister the gesture from invoking any pointer action.
            </summary>
            <param name="gestureName"></param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.UnregisterAllGestures">
            <summary>
            Unregister the gesture from invoking any pointer action.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.SendPointerAction(OmekFramework.Common.Pointer.PointerAction)">
            <summary>
            Fire a PointerAction
            </summary>
            <param name="pa">the pointer action to fire</param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.OSPointer.OnPointerAction(OmekFramework.Common.Pointer.PointerAction)">
            <summary>
            Perform the specified pointer action
            </summary>
            <param name="pa">The pointer action to perform</param>
        </member>
        <member name="P:OmekFramework.Common.Pointer.OSPointer.ScreenWidth">
            <summary>
            The screen width
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.OSPointer.ScreenHeight">
            <summary>
            The screen height
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.OSPointer.LeftCornerPosition">
            <summary>
            The position of the left top corner of the application mouse area
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.OSPointer.TopCornerPosition">
            <summary>
            The position of the left top corner of the application mouse area
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags">
            <summary>
            Flags for mouse events
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.LEFTDOWN">
            <summary>
            Left button down
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.LEFTUP">
            <summary>
            Left button up
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.MIDDLEDOWN">
            <summary>
            Middle button down
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.MIDDLEUP">
            <summary>
            Middle button up
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.MOVE">
            <summary>
            Move
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.ABSOLUTE">
            <summary>
            ABSOLUTE
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.RIGHTDOWN">
            <summary>
            Right button down
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.RIGHTUP">
            <summary>
            Right button up
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.WHEEL">
            <summary>
            Mouse wheel
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.XDOWN">
            <summary>
            XDOWN
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.OSPointer.MouseEventFlags.XUP">
            <summary>
            XUP
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Pointer.Pointer">
            <summary>
            Provides coordinates mapping between a certain joint to a pointer normalized to it's set space.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.CUSTOM_SMOOTHING_SCHEME_NAME">
            <summary>
            The name of the custom smoothing scheme.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.MIN_UPDATE_TIME">
            <summary>
            The minimum time between non tracking updates (where no new data was acquired) of the position.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_jointAnchorPosition">
            <summary>
            The noise reduced joint anchor position
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_anchorJoint">
            <summary>
            The anchor joint to be used for the anchor position if it is set as such - set to the person's torso.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_pointerJoint">
            <summary>
            The joint to be used for the end pointer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_anchorJointConfidenceGetter">
            <summary>
            A caching of the anchor joint confidence getter
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_anchorJointPositionGetter">
            <summary>
            A caching of the anchor joint position getter
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_pointerJointConfidenceGetter">
            <summary>
            A caching of the pointer joint confidence getter
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_pointerJointPositionGetter">
            <summary>
            A caching of the pointer joint position getter
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_minPointerPosUpdateRatio">
            <summary>
            The minimum lerp ratio to use when updating the pointer position.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_skeletonReference">
            <summary>
            A reference to the skeleton used to acquire the joint's position.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_movementBox">
            <summary>
            The movement box in which the final joint values are normalized.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_trackedObjectID">
            <summary>
            The tracked object ID for which this pointer is.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_usingAbsoluteAnchorPosition">
            <summary>
            Indicates if a position in space is used for the anchor position, or if the anchor is actually a joint.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_absoluteAnchorPosition">
            <summary>
            Indicates the absolute position in space that is used for the anchor, if it is used as such.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_curPointerCoordinates">
            <summary>
            The current 3D position of the end pointer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_previousPointerPosition">
            <summary>
            The previous 3D position of the end pointer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_smoothedPointerPosition">
            <summary>
            The 3D spring smoother of the normalized pointer position
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_noiseReducedPointerPosition">
            <summary>
            The 3D noise reduced pointer position.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_farStabilizeThreshold">
            <summary>
            The threshold used for far stabilization outliers in smoothing.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_consecutiveFailTimeout">
            <summary>
            The threshold used for the amount of consecutive fails after which the stabilization smoothing resets.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_minConfidenceThreshold">
            <summary>
            The minimum threshold for confidence only above which values are used.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_smoothingSchemeMapping">
            <summary>
            Smoothing scheme names to smoothing parameters mapping
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_currentSmoothingParameters">
            <summary>
            The currently selected smoothing scheme parameters.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_currentRealWorldMovmentBox">
            <summary>
            Hold the current dimensions of the movement box in real world coordinates
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_minAdaptivePointerSpeed">
            <summary>
             minimum ratio of pointer the pointer speed - as changed by the abapthive pointer precidion
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_maxAdaptivePointerSpeed">
            <summary>
             maximum ratio of pointer the pointer speed - as changed by the abapthive pointer precidion
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_useClickLock">
            <summary>
            Indicates if there should be a slow down in the pointer movement when there is a fast change in depth values.
            This option should be used to enforce less pointer movement when the user changes the depth while intending to
            remain in the same pointer position (e.g. clicking on a button in a menu).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_useAdaptivePointerPrecision">
            <summary>
            Indicates if there should be a slow down in the pointer movement as there are more subtle movements of the
            controlling joint. This option is helpful when there is a visible pointer, and the user can use finer
            control when using small movements, allowing to user to correct his movements according to the display.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_lastUpdateTime">
            <summary>
            The last time there was a non tracking update (where no new data was acquired) of the poisition.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_currentSpeed">
            <summary>
            The current 3D speed of the end pointer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_prevSpeed">
            <summary>
            The previous 3D speed of the end pointer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_pointerSpeedHistory">
            <summary>
            A history of the speed magnitudes of the end pointer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_currentSmoothingSchemeName">
            <summary>
            The current selected smoothing scheme name
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.m_currentDeltaTime">
            <summary>
            The current delta time from the last non tracking update (where no new data was acquired) of the position.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.#ctor(System.UInt32,Omek.JointID,OmekFramework.Common.BasicTypes.MovementBox)">
            <summary>
            Constructs a pointer according to its movement box.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.SetCustomSmoothingParameters(OmekFramework.Common.Pointer.Pointer.SmoothingParameters)">
            <summary>
            Set the smoothing scheme to a custom smoothing scheme set according to the given smoothing parameters.
            </summary>
            <param name="smoothingParams">The custom smoothing scheme smoothing parameters.</param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.SetAnchorToJoint(Omek.JointID)">
            <summary>
            Set the anchor position to the specified joint.
            This anchor determines the position in which the MovementBox is placed.
            </summary>
            <param name="anchorJoint">The joint to position the anchor at</param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.SetAnchorToAbsolutePosition(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Set the anchor position at an absolute position in real space.
            This anchor determines the position in which the MovementBox is placed.
            </summary>
            <param name="absolutePosition">The absolute position in real space at which to position the anchor</param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdateFromTracking">
            <summary>
            Update according to new data from the camera
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdatePointerJointCaching">
            <summary>
            Update the caching of the pointer joint
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdateAnchorJointCaching">
            <summary>
            Update the caching of the anchor joint
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdateJointCaching">
            <summary>
            update the joint caching
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdateJointReferenceCaching">
            <summary>
            update the joint refernce caching
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdateAnchorJointPosition">
            <summary>
            Update the anchor position according to new data from the camera.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdatePointerPosition">
            <summary>
            Update the pointer position according to new data from the camera.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.GetMeasuringUnit">
            <returns>the current measuring unit</returns>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdateNormalizedPointerPosition">
            <summary>
            Update the normalized pointer position.
            The anchor position is added to by the center offset multiplied by the measuring unit,
            receiving the center of the movement box.
            In this movement box all movement is normalized by the dimensions of this box.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.InitSmoothers">
            <summary>
            Initialize the smoothers.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.OnSmoothingSchemeChanged">
            <summary>
            Update the smoothing parameters.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.GetJointSpringSmoother">
            <summary>
            Returns the joint spring smoother.
            </summary>
            <returns>The joint's spring smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.GetJointWeightedSmoother">
            <summary>
            Returns the weighted joint smoother.
            </summary>
            <returns>The weighted joint smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.GetJointStabilizeSmoother">
            <summary>
            Returns the joint stabilization smoother.
            </summary>
            <returns>The joint stabilization smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.NonTrackingUpdate">
            <summary>
            Perform the non tracking update.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.ResetToStartPos">
            <summary>
            Reset the tracking data to the starting position - we update the tracking and then we reset the smoothers to start at the current position acquired from the tracking.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.FinalizeInitialization">
            <summary>
            called at the end of initalization
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.ResetSmoothers">
            <summary>
            Reset the smoothers
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdatePosition(System.Single)">
            <summary>
            Non tracking update - Update the pointer position.
            </summary>
            <param name="deltaTime">The current delta time</param>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdateSpringAccordingToDepth">
            The slow down in the pointer movement when there is a fast change in depth values.
            This option should be used to enforce less pointer movement when the user changes the depth while intending to
            remain in the same pointer position (e.g. clicking on a button in a menu).
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.UpdateAdaptivePointerSensitivity">
            <summary>
            Slows down the pointer movement as there are more subtle movements of the
            controlling joint. This option is helpful when there is a visible pointer, and the user can use finer
            control when using small movements, allowing to user to correct his movements according to the display.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.PointerJoint">
            <summary>
            The joint to be used for the end pointer.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.TrackedObjectID">
            <summary>
            The object ID for which this pointer is.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.Position">
            <summary>
            The current smoothed 3D position of the pointer.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.Speed">
            <summary>
            The current speed of the pointer.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.DeltaPosition">
            <summary>
            The delta of this and the previous 3D position of the pointer
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.DeltaTime">
            <summary>
            The current delta time from the last non tracking update (where no new data was acquired) of the poisition.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.Acceleration">
            <summary>
            The acceleration of the 3D pointer
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.CurrentSmoothingSchemeName">
            <summary>
            The current chosen smoothing scheme name
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.MovementBox">
            <summary>
            The movement box in which the final joint values are normalized.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.ActualMovementBox">
            <summary>
            The movement box in which the final joint values are normalized.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.UseClickLock">
            <summary>
            Indicates if there should be a slow down in the pointer movement when there is a fast change in depth values.
            This option should be used to enforce less pointer movement when the user changes the depth while intending to
            remain in the same pointer position (e.g. clicking on a button in a menu).
            not implemented Yet in Beckon
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.UseAdaptivePointerPrecision">
            <summary>
            Indicates if there should be a slow down in the pointer movement as there are more subtle movements of the
            controlling joint. This option is helpful when there is a visible pointer, and the user can use finer
            control when using small movements, allowing to user to correct his movements according to the display.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.NoiseReduceJointPosition">
            <summary>
            The position of the joint after noise reduction without the full smoothingqscaling mechnism
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Pointer.Pointer.PointerLocker">
            <summary>
            not implemented Yet in Beckon
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Pointer.Pointer.SmoothingParameters">
            <summary>
            Smoothing parameters, defining the common smoothing behavior of the pointer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.SmoothingParameters.StabilizationFrames">
            <summary>
            The amount of samples to be saved to memory in determining the joint's position in the StabilizeSmoother
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.SmoothingParameters.NearStabilizationThresholdDistance">
            <summary>
            The near stabilization threshold to be used in determining what is the minimum distance for points from the stabilization point not to be considered as noise
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.SmoothingParameters.WeightedAveragerArray">
            <summary>
            The weights of each component in the WeightedSmoother
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Pointer.Pointer.SmoothingParameters.SpringStrength">
            <summary>
            The spring strength in the SpringSmoother
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Pointer.Pointer.SmoothingParameters.#ctor(System.Int32,System.Single,System.Single,System.Single[])">
            <summary>
            Constructor
            </summary>
            <param name="stabilizationFrames">Set the amount of samples to be saved to memory in determining the joint's position in the StabilizeSmoother</param>
            <param name="nearStabilizationThresholdDistance">The near stabilization threshold to be used in determining what is the minimum distance
            for points from the stabilization point not to be considered as noise</param>
            <param name="springStrength">The spring strength in the SpringSmoother</param>
            <param name="weightedAveragerArray">The weights of each component in the WeightedSmoother</param>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3">
            <summary>
            Represents a 3 dimensional vector.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.DEFAULT_FLOAT_FORMAT">
            <summary>
            Default float format used to display the vector components.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.COORDINATE_EQUALITY_EPSILON">
            <summary>
            Used to indicate if the distance in each coordinate in two vector is close enough.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.x">
            <summary>
            X component of the vector.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.y">
            <summary>
            Y component of the vector.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.z">
            <summary>
            Z component of the vector.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new vector with the given x, y and z initialized to zero.
            </summary>
            <param name="x">X value for the vector</param>
            <param name="y">Y value for the vector</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new vector with given x, y, z components.
            </summary>
            <param name="x">X value for the vector</param>
            <param name="y">Y value for the vector</param>
            <param name="z">Z value for the vector</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.op_UnaryNegation(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Returns a vector in the opposite direction of the given vector.
            </summary>
            <param name="a">The Vector to get in the opposite direction</param>
            <returns>The opposite direction vector.</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.op_Subtraction(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Subtracts one vector from another and returns the result.
            </summary>
            <param name="a">The vector to subtract from</param>
            <param name="b">The vector to subtract</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.op_Inequality(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Returns true if both vectors are different in any coordinates.
            Note that even close vectors are different.
            </summary>
            <param name="lhs">Left hand vector</param>
            <param name="rhs">Right hand vector</param>
            <returns>True if the vectors are not equal</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.op_Multiply(System.Single,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Multiplies a vector by a scalar and returns the result.
            </summary>
            <param name="d">The scalar</param>
            <param name="a">The vector</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.op_Multiply(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="a">The vector</param>
            <param name="d">The scalar</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.op_Division(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Divides a vector by a scalar and returns the result.
            </summary>
            <param name="a">The vector</param>
            <param name="d">The scalar</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.op_Addition(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Adds two vectors and returns the result.
            </summary>
            <param name="lhs">Left hand vector</param>
            <param name="rhs">Right hand vector</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.op_Equality(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Returns true if vectors are the same in all coordinates.
            Note that closeness in coordinate is not enough, they must be the same one.
            </summary>
            <param name="lhs">Left hand vector</param>
            <param name="rhs">Right hand vector</param>
            <returns>True if the vectors are equal</returns>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.CONST_ZERO">
            <summary>
            Used to obtain the many times used const zero vector.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.MAX_VECTOR">
            <summary>
            Used to obtain the maximum vector value possible.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.MIN_VECTOR">
            <summary>
            Used to obtain the minimum vector value possible.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.SqrMagnitude(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Returns the squared length of this vector
            </summary>
            <returns>The squared length of this vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Magnitude(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Returns the length of this vector
            </summary>
            <returns>The length of this vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Normalized">
            <summary>
            Returns this vector with a magnitude of 1
            </summary>
            <returns>Copy of this vector with a magnitude of 1</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.ToString">
            <summary>
            Returns a string representation of this Vector.
            </summary>
            <returns>A string representation of this Vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.ToString(System.String)">
            <summary>
            Returns a string representation of this Vector according to the given float format.
            </summary>
            <param name="floatFormat">The float format</param>
            <returns>A string representation of this Vector according to the given float format</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this vector.
            </summary>
            <returns>A hash code for this vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Dot(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Returns the dot product between the left and right vectors.
            </summary>
            <param name="lhs">The left handed vector</param>
            <param name="rhs">The right handed vector</param>
            <returns>The dot product between the left and right vectors.</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Cross(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Returns a vector that is the cross product of the left handed and right handed vectors.
            </summary>
            <param name="lhs">The left handed vector</param>
            <param name="rhs">The right handed vector</param>
            <returns>A vector that is the cross product of the left handed and right handed vectors.</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.SameValued(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Returns true if both vectors are very close in all their coordinates.
            </summary>
            <param name="lhs">The left handed vector</param>
            <param name="rhs">The right handed vector</param>
            <returns>True if both vectors are very close in all their coordinates</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Lerp(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Linearly interpolates between two vectors.
            Interpolates from towards to by amount t.
            t is clamped between [0...1]. When t = 0 returns from.
            When t = 1 returns to. When t = 0.5 returns the average of from and to.
            </summary>
            <param name="from">The start of the interpolation</param>
            <param name="to">The end of the interpolation</param>
            <param name="t">Position in the interpolation</param>
            <returns>The linearly interpolated result</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.MoveTowards(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Moves a point current towards target.
            Performs linear interpolation and makes sure the speed does not exceed maxDistanceDelta.
            Negative values of maxDistanceDelta pushes the vector away from target.
            </summary>
            <param name="current">The current point</param>
            <param name="target">The target point</param>
            <param name="maxDistanceDelta">The maximum distance to pass</param>
            <returns>The point moved to</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Project(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Projects a vector onto another vector
            </summary>
            <param name="vector">The vector to project</param>
            <param name="onNormal">The vector to project onto</param>
            <returns>Returns vector projected onto onNormal. Returns zero vector if onNormal is almost zero.</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.OrthoNormalize(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@)">
            <summary>
            Makes vectors normalized and orthogonal to each other.
            Normalizes normal. Normalizes tangent and makes sure it is orthogonal to normal (that is, angle between them is 90 degrees).
            </summary>
            <param name="normal">Will be normalized</param>
            <param name="tangent">will be normalized and makes sure it is orthogonal to normal</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Equals(System.Object)">
            <summary>
            Returns True if the other given object is a Vector3 that is equal to this vector.
            </summary>
            <param name="obj">The other object</param>
            <returns>True if the other given object is a Vector3 that is equal to this vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Parse(System.String)">
            <summary>
            Parse a string to a vector 3D
            </summary>
            <param name="data">the string to parse</param>
            <returns>a Vector3 which is the representation of the given string</returns>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.back">
            <summary>
            Shorthand for writing Vector3(0, 0, -1)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.down">
            <summary>
            Shorthand for writing Vector3(0, -1, 0)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.forward">
            <summary>
            Shorthand for writing Vector3(0, 0, 1)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.left">
            <summary>
            Shorthand for writing Vector3(-1, 0, 0)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.one">
            <summary>
            Shorthand for writing Vector3(1, 1, 1)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.right">
            <summary>
            Shorthand for writing Vector3(1, 0, 0)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.up">
            <summary>
            Shorthand for writing Vector3(0, 1, 0)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.zero">
            <summary>
            Shorthand for writing Vector3(0, 0, 0)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.maxVector">
            <summary>
            Shorthand for the max Vector3
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.minVector">
            <summary>
            Shorthand for the max Vector3
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.Item(System.Int32)">
            <summary>
            access vector values by indexer
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.magnitude">
            <summary>
            The length of this vector.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.sqrMagnitude">
            <summary>
            Returns the squared length of this vector.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.normalized">
            <summary>
            Returns a copy of this vector normalized.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector3.isNaN">
            <summary>
            Returns true if this vector has any NaN values
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.HistoryBuffer`1">
            <summary>
            A buffer of data points with time associated with each point
            </summary>
            <typeparam name="T">the type of data points</typeparam>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.HistoryBuffer`1.#ctor(System.Double)">
            <summary>
            Constructr
            </summary>
            <param name="historyInterval"></param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.HistoryBuffer`1.AddPoint(`0,System.Double)">
            <summary>
            add point the the buffer
            </summary>
            <param name="point">the data point</param>
            <param name="time">the data point time</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.HistoryBuffer`1.Clear">
            <summary>
            clear all data points
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.HistoryBuffer`1.TrimHistory(System.Double)">
            <summary>
            remove all points older then specific time
            </summary>
            <param name="now">points older then this time will be removed</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.HistoryBuffer`1.GetDataArray">
            <returns>all data points</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.HistoryBuffer`1.GetTimeArray">
            <returns>all time stamps as array</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.HistoryBuffer`1.HistoryCount">
            <returns>the current amount of data points</returns>
        </member>
        <member name="F:OmekFramework.Common.Data.CommonData.m_trackedObjectsAccessor">
            <summary>
            An accessor to m_trackedObjects
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CommonData.m_playersAccessor">
            <summary>
            An accessor to m_trackedObjects by player id
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.CommonData.m_trackedObjects">
             <summary>
             An array of the TrackedObjects in the system,
             actually a reference to the specific dictionary managed by the specific framework
            
             </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.CommonData.TrackedObjects">
            <summary>
            An accessor to the Persons in the system
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.CommonData.Players">
            <summary>
            A indexer for the tracked objects in the system by their player ID
            if such player doesn't exist, return a dummy person which will fail all operations
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.CommonData.TrackedObjectPersonsAccessor">
            <summary>
            An accessor to TrackedObjects' data.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.CommonData.TrackedObjectPersonsAccessor.Count">
            <summary>
            Returns the number of tracked objects in the system.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.CommonData.PlayersAccessor">
            <summary>
            A indexer for the tracked objects in the system by their player ID
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.FrameworkManager">
            <summary>
            Abstract type from which framework manager should inherit
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.SDK_STATUS_OK">
            <summary>
            The SDK OK status.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.GenericInstance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_sensor">
            <summary>
            The sensor reference
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_analyzer">
            <summary>
            The analyzer refrence
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_genericPlayerSelection">
            <summary>
            The reference to player selection mechanism
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_usingRunSensor">
            <summary>
            Is the RunSensor used
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_useStatelessMode">
            <summary>
            This should be turn on to set component to work in a stateless mode (i.e ignore alerts etc.)
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_lastFrame">
            <summary>
            The last frame received by the SDK.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_recordStartFrameNum">
            <summary>
            The frame when the last recording started
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_recordingFrameLength">
            <summary>
            The length of a recording when performing one.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_isInRecoreding">
            <summary>
            Do we currently record a sequence
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_recordingBasePath">
            <summary>
            Where to keep recording sequences
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_waitForNewImage">
            <summary>
            When calling ProcessNextImage, should the next image be waited for.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.FrameworkManager.m_isInitialized">
            <summary>
            Indicates if the manager is initialized.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.CreateSensor``1(OmekFramework.Common.Main.SessionConfiguration)">
            <summary>
            Create the sensor according to the entered SessionConfiguration.
            </summary>
            <typeparam name="T">A type implementing ITrackedObject</typeparam>
            <param name="conf">A class the describing the the configuration of the sensor run</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.CreateSensor(OmekFramework.Common.Main.SessionConfiguration)">
            <summary>
            Initialize all framework components
            </summary>
            <param name="conf">contain configuration parameters, relevent to framework initalization</param>
            <returns>ReturnCode describing the rum of the method</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.HasNewImage(System.UInt64,System.UInt64@,System.Boolean@)">
            <summary>
            Indicates if there is a new image in respect to the last frame in which an image was accepted.
            </summary>
            <param name="lastFrame">The last known SDK frame</param>
            <param name="thisFrame">(Output) The current frame</param>
            <param name="hasNewImage">(Output) Indicates if there is a new image</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.DestroySensor">
            <summary>
            Clear all previously initialized framework components
            </summary>
            <returns>ReturnCode describing the rum of the method</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.ResetState">
            <summary>
            Reset the state of all framework components
            </summary>
            <returns></returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.IsInit">
            <summary>
            Indicates if the FrameworkManager is initialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.ToggleRecording">
            <summary>
            Start/Stop the recording of a sequence
            </summary>
            <returns></returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.UpdateStates(System.Boolean@)">
            <summary>
            Update the state of all framework components according to the last frame from the sensor.
            This must be call periodically.
            </summary>
            <param name="hasNewImage">set to true if there was a new image to process</param>
            <returns>ReturnCode describing the rum of the method</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.GetTrackedObjectsInSystem(System.Collections.Generic.List{System.UInt32}@)">
            <summary>
            Return a list of curently tracked objects ID's
            </summary>
            <param name="trackedObjectsIDs">list of curently tracked objects ID's</param>
            <returns>ReturnCode describing the rum of the method</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.InitSDKAnalyzer">
            <summary>
            Initializes the SDK specific analyzer
            </summary>
            <returns>OMKStatus indiciating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.IsSensorInitalized">
            <summary>
            Indicates if the Sensor is initialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.SDKSpecificUpdateState">
            <summary>
            Updates the current system state for the overriding Framework. Must be run to advance the state.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.ReleaseAll">
            <summary>
            Release all references in manager.
            </summary>
            <returns>ReturnCode indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.CreateSensorAccordingToTrackedObjectType``1(OmekFramework.Common.Main.SessionConfiguration)">
            <summary>
            Create the sensor according to the entered SessionConfiguration.
            </summary>
            <typeparam name="T">A type implementing IPersonAnalyzer</typeparam>
            <param name="conf">A class the describing the the configuration of the sensor run</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.GetRecordingSuffix">
            <summary>
            Returns the recording suffix
            </summary>
            <returns>The recording suffix</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.EnableGestureList(System.String[])">
            <summary>
            Enable each gesture in the given gestures array.
            If error occurres when enabling any gesture, continue onwards but report the error.
            </summary>
            <param name="gestures">Gesture array to enable</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.FrameworkManager.EnableAlertList(Omek.AlertEventType[])">
            <summary>
            Enable each alert in the given alerts array.
            If error occurres when enabling any alert, continue onwards and report the error.
            </summary>
            <param name="alerts">Alert array to enable</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.Sensor">
            <summary>
            Returns the current Sensor used by the framework
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.Analyzer">
            <summary>
            Returns the current Analyzer used by the framework
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.UsingRunSensor">
            <summary>
            Is the RunSensor used
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.UseStatelessMode">
            <summary>
            This should be turn on to set component to work in a stateless mode (i.e ignore alerts etc.)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.RecordingFrameLength">
            <summary>
            The length of a recording when performing one.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.IsInRecording">
            <summary>
            Do we currently record a sequence
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.RecordingBasePath">
            <summary>
            Where to keep recorded sequences
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.WaitForNewImage">
            <summary>
            When calling ProcessNextImage, should the next image be waited for.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.LastFrame">
            <summary>
            The last frame received by the SDK.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.Gestures">
            <summary>
            Reference to the Gestures singleton
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.Alerts">
            <summary>
            Reference to the Alerts singleton
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Main.FrameworkManager.GenericPlayerSelection">
            <summary>
            Generic access to the Player Selection
            </summary>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2">
            <summary>
            Represents a 2 dimensional vector.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.DEFAULT_FLOAT_FORMAT">
            <summary>
            Default float format used to display the vector components.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.COORDINATE_EQUALITY_EPSILON">
            <summary>
            Used to indicate if the distance in each coordinate in two vector is close enough.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.x">
            <summary>
            X component of the vector.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.y">
            <summary>
            Y component of the vector.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new vector with the given x, y
            </summary>
            <param name="x">X value for the vector</param>
            <param name="y">Y value for the vector</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.op_UnaryNegation(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Returns a vector in the opposite direction of the given vector.
            </summary>
            <param name="a">The Vector to get in the opposite direction</param>
            <returns>The opposite direction vector.</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.op_Subtraction(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Subtracts one vector from another and returns the result.
            </summary>
            <param name="a">The vector to subtract from</param>
            <param name="b">The vecotr to subtract</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.op_Inequality(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Returns true if both vectors are different in any coordinates.
            Note that even close vectors are different.
            </summary>
            <param name="lhs">Left hand vector</param>
            <param name="rhs">Right hand vector</param>
            <returns>True if the vectors are not equal</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.op_Multiply(System.Single,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Multiplies a vector by a scalar and returns the result.
            </summary>
            <param name="d">The scalar</param>
            <param name="a">The vector</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.op_Multiply(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="a">The vector</param>
            <param name="d">The scalar</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.op_Division(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single)">
            <summary>
            Divides a vector by a scalar and returns the result.
            </summary>
            <param name="a">The vector</param>
            <param name="d">The scalar</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.op_Addition(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Adds two vectors and returns the result.
            </summary>
            <param name="lhs">Left hand vector</param>
            <param name="rhs">Right hand vector</param>
            <returns>The resultant vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.op_Equality(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Returns true if vectors are the same in all coordinates.
            Note that closeness in coordinate is not enough, they must be the same one.
            </summary>
            <param name="lhs">Left hand vector</param>
            <param name="rhs">Right hand vector</param>
            <returns>True if the vectors are equal</returns>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.CONST_ZERO">
            <summary>
            Used to obtain the many times used const zero vector.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.MAX_VECTOR">
            <summary>
            Used to obtain the maximum vector value possible.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.MIN_VECTOR">
            <summary>
            Used to obtain the minimum vector value possible.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.Magnitude(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Returns the length of this vector
            </summary>
            <returns>The length of this vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.SqrMagnitude(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Returns the squared length of this vector
            </summary>
            <returns>The squared length of this vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.Normalized">
            <summary>
            Returns this vector with a magnitude of 1
            </summary>
            <returns>Copy of this vector with a magnitude of 1</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.ToString">
            <summary>
            Returns a string represnetation of this Vector.
            </summary>
            <returns>A string represnetation of this Vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.ToString(System.String)">
            <summary>
            Returns a string represnetation of this Vector according to the given float format.
            </summary>
            <param name="floatFormat">The float format</param>
            <returns>A string represnetation of this Vector according to the given float format</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this vector.
            </summary>
            <returns>A hash code for this vector</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.Dot(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Returns the dot product between the left and right vectors.
            </summary>
            <param name="lhs">The left handed vector</param>
            <param name="rhs">The right handed vector</param>
            <returns>The dot product between the left and right vectors.</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.SameValued(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Returns true if both vectors are very close in all their coordinates.
            </summary>
            <param name="lhs">The left handed vector</param>
            <param name="rhs">The right handed vector</param>
            <returns>True if both vectors are very close in all their coordinates</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.Lerp(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single)">
            <summary>
            Linearly interpolates between two vectors.
            Interpolates from towards to by amount t.
            t is clamped between [0...1]. When t = 0 returns from.
            When t = 1 returns to. When t = 0.5 returns the average of from and to.
            </summary>
            <param name="from">The start of the interpolation</param>
            <param name="to">The end of the interpolation</param>
            <param name="t">Position in the interpolation</param>
            <returns>The lineary interpolated result</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.MoveTowards(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single)">
            <summary>
            Moves a point current towards target.
            Performs linear interpolation and makes sure the speed does not exceed maxDistanceDelta.
            Negative values of maxDistanceDelta pushes the vector away from target.
            </summary>
            <param name="current">The current point</param>
            <param name="target">The target point</param>
            <param name="maxDistanceDelta">The maximum distance to pass</param>
            <returns>The point moved to</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.Equals(System.Object)">
            <summary>
            Returns True if the other given object is a Vector2 that is equal to this vector.
            </summary>
            <param name="obj">The other object</param>
            <returns>True if the other given object is a Vector2 that is equal to this vector</returns>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.down">
            <summary>
            Shorthand for writing Vector2(0, -1)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.left">
            <summary>
            Shorthand for writing Vector2(-1, 0)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.one">
            <summary>
            Shorthand for writing Vector2(1, 1)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.right">
            <summary>
            Shorthand for writing Vector2(1, 0)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.up">
            <summary>
            Shorthand for writing Vector2(0, 1)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.zero">
            <summary>
            Shorthand for writing Vector2(0, 0)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.maxVector">
            <summary>
            Shorthand for the max Vector2
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.minVector">
            <summary>
            Shorthand for the max Vector2
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.Item(System.Int32)">
            <summary>
            access vector values by indexer
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.magnitude">
            <summary>
            The length of this vector.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.sqrMagnitude">
            <summary>
            Returns the squared length of this vector.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.normalized">
            <summary>
            Returns a copy of this vector normalized.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Vector2.isNaN">
            <summary>
            Retruns true if this vector has any NaN values
            </summary>
        </member>
        <member name="T:OmekFramework.Common.SensorImage.SensorImageData">
            <summary>
            Contains data on a sensor image.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.SYNCH_IMAGE_TO_SKELETON_FRAME_DELAY">
            <summary>
            Amount of frames to delay when the images are exposed publicly via GetData.
            Values are between 1 -
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.m_imageType">
            <summary>
            The image type
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.m_iFormat">
            <summary>
            The image format
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.m_iData">
            <summary>
            The actual image data
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.m_imageBuffer">
            <summary>
            Buffer of the images, used to return images from several frames back
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.m_returnCodeBuffer">
            <summary>
            Buffer for the images return code - when delaying we want to return the return code that fits the correct image acquirement
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.m_curDelayBufferIndex">
            <summary>
            The current index within the image delay buffer.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.m_syncImageWithSkeleton">
            <summary>
            Indicates if the image data should be synched with the skeleton data.
            This basically means that a delay of SYNCH_IMAGE_TO_SKELETON_FRAME_DELAY frames is
            introduced to when the images are received.
            This should only be used if there is a need to overlay the user image and his skeleton.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.SensorImageData.m_lastFrame">
            <summary>
            The previous frame number
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.SensorImageData.#ctor(Omek.ImageType)">
            <summary>
            Constructor that defines the image type.
            </summary>
            <param name="imageType">The image type</param>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.SensorImageData.GetData(OmekFramework.Common.BasicTypes.CommonDefines.ImageData@,System.Boolean)">
            <summary>
            Gets the actual image data.
            If it is not yet acquired in this frame, and tryToUpdate set to true, updates the data.
            </summary>
            <param name="IData">(output) The image data</param>
            <param name="forceUpdateData">(optional) if true the data will be reloaded even if it already up to date</param>
            <returns>Return code, indicating success or the error occurred</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.SensorImageData.GetImageFormat(OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat@)">
            <summary>
            Acquires the image format if it's not already available, and returns it.
            </summary>
            <param name="IFormat">(output) the image format</param>
            <returns>Return code, indicating success or the error occurred</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.SensorImageData.IsDataInitialized">
            <summary>
            Returns true if the image data was initialized
            </summary>
            <returns>true if the image data was initialized</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.SensorImageData.GetImageData(OmekFramework.Common.BasicTypes.CommonDefines.ImageData@)">
            <summary>
            Gets the image data.
            </summary>
            <returns>Return code, indicating success or the error occurred</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.SensorImageData.UpdateImageData(System.Boolean)">
            <summary>
            Fills in the image data.
            </summary>
            <param name="forceFormatUpdate">Forces the image format to be updated even if it already exist</param>
            <returns>Return code, indicating success or the error occurred</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.SensorImageData.UpdateImageFormat(System.Boolean)">
            <summary>
            Fills in the image format.
            </summary>
            <param name="forceUpdate">Forces the image format to be updated even if it already exist</param>
            <returns>Return code, indicating if image format was acquired successfully</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.SensorImageData.GetDelayedImageData">
            <summary>
            Get image data that is delayed SYNCH_IMAGE_TO_SKELETON_FRAME_DELAY frames
            </summary>
            <returns>>Return code, indicating if image format was acquired successfully</returns>
        </member>
        <member name="P:OmekFramework.Common.SensorImage.SensorImageData.SyncImageWithSkeleton">
            <summary>
            Indicates if the image data should be synched with the skeleton data.
            This basically means that a delay of SYNCH_IMAGE_TO_SKELETON_FRAME_DELAY frames is
            introduced to when the images are received.
            This should only be used if there is a need to overlay the user image and his skeleton.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.SensorImage.SensorImageData.ImageType">
            <summary>
            The image type
            </summary>
        </member>
        <member name="T:OmekFramework.Common.SensorImage.MaskImageData">
            <summary>
            Contains data on a person mask sensor image.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.MaskImageData.m_trackedObjectID">
            <summary>
            The person id
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.MaskImageData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.MaskImageData.GetImageData(OmekFramework.Common.BasicTypes.CommonDefines.ImageData@)">
            <summary>
            Gets the image data.
            </summary>
            <returns>Return code, indicating success or the error occurred</returns>
        </member>
        <member name="P:OmekFramework.Common.SensorImage.MaskImageData.TrackedObjectID">
            <summary>
            The person id
            </summary>
        </member>
        <member name="T:OmekFramework.Common.SensorImage.RegularImageData">
            <summary>
            Contains data on a regular (color or depth) sensor image.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.RegularImageData.#ctor(Omek.ImageType)">
            <summary>
            Constructor that defines the image type.
            </summary>
            <param name="imageType">The image type</param>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.RegularImageData.GetImageData(OmekFramework.Common.BasicTypes.CommonDefines.ImageData@)">
            <summary>
            Gets the image data.
            </summary>
            <returns>Return code, indicating success or the error occurred</returns>
        </member>
        <member name="P:OmekFramework.Common.SensorImage.RegularImageData.MinPixelValue">
            <summary>
            Minimum calculated pixel value.
            Calculated only after an image is acquired using GetData
            </summary>
        </member>
        <member name="P:OmekFramework.Common.SensorImage.RegularImageData.MaxPixelValue">
            <summary>
            Maximum calculated pixel value.
            Calculated only after an image is acquired using GetData
            </summary>
        </member>
        <member name="T:OmekFramework.Common.SensorImage.RGBImageData">
            <summary>
            Contains data on a color sensor image.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.RGBImageData.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.RGBImageData.GetImageData(OmekFramework.Common.BasicTypes.CommonDefines.ImageData@)">
            <summary>
            Gets the image data.
            </summary>
            <returns>Return code, indicating success or the error occurred</returns>
        </member>
        <member name="T:OmekFramework.Common.SensorImage.DepthImageData">
            <summary>
            Contains data on a depth sensor image.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.DepthImageData.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.DepthImageData.GetImageData(OmekFramework.Common.BasicTypes.CommonDefines.ImageData@)">
            <summary>
            Gets the image data.
            </summary>
            <returns>Return code, indicating success or the error occurred</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.ImageDataGetter.GetImageData(OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat,OmekFramework.Common.BasicTypes.CommonDefines.ImageData)">
            <summary>
            Gets the image (depth/color according to the iFormat) of a certain player and puts it in a buffer inside the entered ImageData.
            </summary>
            <param name="iFormat">The image format</param>
            <param name="iData">A class containing the buffer of the image. If the buffer is not allocated or not large enough, it allocates it.</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.ImageDataGetter.GetTrackedObjectImageData(System.UInt32,OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat,OmekFramework.Common.BasicTypes.CommonDefines.ImageData)">
            <summary>
            Gets the person image of a certain player and puts it in a buffer inside the entered ImageData.
            </summary>
            <param name="trackedObjectID">The person id for which to get the person image for</param>
            <param name="iFormat">The image format</param>
            <param name="iData">A class containing the buffer of the person image. If the buffer is not allocated or not of the correct size (according to the format), it allocates it</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.ImageDataGetter.VerifyBufferSize(OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat,OmekFramework.Common.BasicTypes.CommonDefines.ImageData)">
            <summary>
            Verify that the given iData has the correct buffer size, and if it does not, it locks it and initializes the correct buffer size.
            </summary>
            <param name="iFormat">The format of the image data</param>
            <param name="iData">The ImageData buffer object to check</param>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.RangeCalculator.HISTORY_LENGTH">
            <summary>
            The maximum count of checks for the min and max pixel values needed.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.RangeCalculator.AFTER_THRESHOLD_FRAME_CHECK_FREQUENCY">
            <summary>
            After the threshold, update the pixel range only every ten frames
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.RangeCalculator.m_minPixelValue">
            <summary>
            Minimum calculated pixel value
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.RangeCalculator.m_maxPixelValue">
            <summary>
            Maximum calculated pixel value
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.RangeCalculator.m_minSum">
            <summary>
            Current sum of the minimum values
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.RangeCalculator.m_lastMins">
            <summary>
            list of the current averaged mins
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.RangeCalculator.m_maxSum">
            <summary>
            Current sum of the maximum values
            </summary>
        </member>
        <member name="F:OmekFramework.Common.SensorImage.RangeCalculator.m_lastMaxs">
            <summary>
            list of the current averaged maxs
            </summary>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.RangeCalculator.UpdatePixelRange(OmekFramework.Common.BasicTypes.CommonDefines.ImageData,OmekFramework.Common.BasicTypes.CommonDefines.ImageFormat)">
            <summary>
            Update the pixel value range according to given image reference.
            This averages the minimum and maximum value with data from previous frames.
            </summary>
            <param name="imageRef">The image data to check the pixel range of</param>
            <param name="format">The format of the image data to check the pixel range of</param>
        </member>
        <member name="M:OmekFramework.Common.SensorImage.RangeCalculator.UpdateMinMax(System.Single,System.Single)">
            <summary>
            Updates the entered the minimum and maximum values to values kept in the system.
            </summary>
            <param name="minVal">The minimum value to correct</param>
            <param name="maxVal">The maximum value to correct</param>
        </member>
        <member name="P:OmekFramework.Common.SensorImage.RangeCalculator.MinPixelValue">
            <summary>
            Minimum calculated pixel value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.SensorImage.RangeCalculator.MaxPixelValue">
            <summary>
            Maximum calculated pixel value
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Main.SessionConfiguration">
            <summary>
            Abstract class. Describe information needed for initialization of the SDK.
            Specific SDK Configuration class should inherit from this
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SessionConfiguration.UseSequence">
            <summary>
            Should a sequence be used? (otherwise the sensor will be initialized).
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SessionConfiguration.SequencePath">
            <summary>
            The sequecne path.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SessionConfiguration.UseRunSensor">
            <summary>
            Should RunSensor be used? (otherwise ProcessNextImage will be used)
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SessionConfiguration.WaitForNewImage">
            <summary>
            When processing using ProcessNextImage, should the next frame be waited to.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SessionConfiguration.VerbosityLevel">
            <summary>
            The SDK verbosity level to be set.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SessionConfiguration.RecordingFrameLength">
            <summary>
            The length of a recording when performing one.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SessionConfiguration.GestureList">
            <summary>
            SDK gestures to register to.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.SessionConfiguration.AlertList">
            <summary>
            SDK alerts to register to.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.SessionConfiguration.FromFile``1(System.String,``0@)">
            <summary>
            Create a SessionConfiguration instance based on XML file
            </summary>
            <param name="filename">the file to read from</param>
            <param name="sessionConfig">the resulted SessionConfiguration</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.SessionConfiguration.WriteToFile(System.String)">
            <summary>
            Serialize this class to file in XML format
            </summary>
            <param name="filename">the file name to write to</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.SmoothableData`1">
            <summary>
            An interface declaring what data that can be smoothed must implement
            </summary>
            <typeparam name="T">Type that the smoothable data handles</typeparam>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableData`1.DistanceBetween(`0,`0)">
            <summary>
            Get the distance between two objects
            </summary>
            <param name="first">The first object</param>
            <param name="second">The second object</param>
            <returns>The distance between them</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableData`1.MoveTo(`0,`0,System.Single)">
            <summary>
            Move the source object towards the target object
            </summary>
            <param name="src">Source object</param>
            <param name="dst">Destination object</param>
            <param name="delta">The amount to move</param>
            <returns>The moved object</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableData`1.Add(`0,`0)">
            <summary>
            Add two objects
            </summary>
            <param name="a">First object</param>
            <param name="b">Second object</param>
            <returns>The added result object</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableData`1.Sub(`0,`0)">
            <summary>
            Subtract two objects
            </summary>
            <param name="a">First object</param>
            <param name="b">Second object</param>
            <returns>The result object</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableData`1.Multiply(`0,System.Single)">
            <summary>
            Multiply an object by a scalar
            </summary>
            <param name="a">The object</param>
            <param name="scalar">The scalar</param>
            <returns>The resultnat multipication by the scalar</returns>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.Smoother`1">
            <summary>
            The smoother interface
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoother`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.Smoother`1.CurrentValue">
            <summary>
            Get the current smoothed value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.Smoother`1.TargetValue">
            <summary>
            Get or set the target that we should move to
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.TimeBasedSmoother`1">
            <summary>
            An interface for smoothing based on time - that is the the state of the current value
            value is updated in time.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.TimeBasedSmoother`1.Update(System.Single)">
            <summary>
            Update the smoothed value and move towards the target
            </summary>
            <param name="deltaTime">Time passed from last update</param>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.ValueBasedSmoother`1">
            <summary>
            An inteferace for smoothing based on values only.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.Smoothing">
            <summary>
            Manages smoothing per instance.
            Usage:
            1: Create smoothing object using Smoothing._____ method
            2: Call obj.TargetValue = ___ and Update() each frame
            3: Access smoothed value using obj.CurrentValue
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector3Spring(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Get a 3 dimensional spring smoother
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="springStrength">The spring's strength</param>
            <returns>The 3D spring smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector2Spring(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single)">
            <summary>
            Get a 2 dimensional spring smoother
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="springStrength">The spring's strength</param>
            <returns>The 2D spring smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.FloatSpring(System.Single,System.Single)">
            <summary>
            Get a 1 dimensional spring smoother
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="springStrength">The spring's strength</param>
            <returns>The 1D spring smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector3Stabilize(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single,System.Int32,System.Int32)">
            <summary>
            Get a 3 dimensional stabilizer for near stabilization
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="nearStabilizeThreshold">The near stabilizing threshold</param>
            <param name="numFrames">The number of frames to use previous values in the calculations</param>
            <param name="consecutiveFailResetThreshold">Consecutive fails in samples after which we consider the stabilization point to have moved, and therefore reset it.</param>
            <returns>The 3D stabilizer</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector3NearFarStabilizer(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Get a 3 dimensional stabilizer for near stabilization and far stabilization.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="nearStabilizeThreshold">The near stabilizing threshold</param>
            <param name="farStabilizeThreshold">The far stabilizing threshold</param>
            <param name="numFrames">The number of frames to use previous values in the calculations</param>
            <param name="consecutiveFailResetThreshold">Consecutive fails in samples after which we consider the stabilization point to have moved, and therefore reset it.
            Default is zero - never reset</param>
            <returns>The 3D stabilizer</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector2Stabilize(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single,System.Int32,System.Int32)">
            <summary>
            Get a 2 dimensional stabilizer for near stabilization.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="nearStabilizeThreshold">The near stabilizing threshold</param>
            <param name="numFrames">The number of frames to use previous values in the calculations</param>
            <param name="consecutiveFailResetThreshold">Consecutive fails in samples after which we consider the stabilization point to have moved, and therefore reset it.
            Default is zero - never reset</param>
            <returns>The 2D stabilizer</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector2NearFarStabilizer(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Get a 2 dimensional stabilizer for near stabilization and far stabilization.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="nearStabilizeThreshold">The near stabilizing threshold</param>
            <param name="farStabilizeThreshold">The far stabilizing threshold</param>
            <param name="numFrames">The number of frames to use previous values in the calculations</param>
            <param name="consecutiveFailResetThreshold">Consecutive fails in samples after which we consider the stabilization point to have moved, and therefore reset it.
            Default is zero - never reset</param>
            <returns>The 2D stabilizer</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.FloatNearFarStabilizer(System.Single,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Get a dimensional stabilizer for near stabilization and far stabilization.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="nearStabilizeThreshold">The near stabilizing threshold</param>
            <param name="farStabilizeThreshold">The far stabilizing threshold</param>
            <param name="numFrames">The number of frames to use previous values in the calculations</param>
            <param name="consecutiveFailResetThreshold">Consecutive fails in samples after which we consider the stabilization point to have moved, and therefore reset it.
            Default is zero - never reset</param>
            <returns>The float stabilizer</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.FloatStabilize(System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Get a stabilizer for near stabilization on a float.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="nearStabilizeThreshold">The near stabilizing threshold</param>
            <param name="numFrames">The number of frames to use previous values in the calculations</param>
            <param name="consecutiveFailResetThreshold">Consecutive fails in samples after which we consider the stabilization point to have moved, and therefore reset it.
            Default is zero - never reset</param>
            <returns>The stabilizer on the float</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector3Weighted(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single[])">
            <summary>
            Returns a 3D weighted average smoother
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="weights">Array of weights for each frame</param>
            <returns>The 3D weighted average smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector2Weighted(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single[])">
            <summary>
            Returns a 2D weighted average smoother
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="weights">Array of weights for each frame</param>
            <returns>The 2D weighted average smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.FloatWeighted(System.Single,System.Single[])">
            <summary>
            Returns a weighted average smoother on a float
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="weights">Array of weights for each frame</param>
            <returns>The weighted average smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector3Linear(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Returns a 3D smoother that smooths by moving in linear fashion towards the target in the specified speed.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="speed">The speed that it moves towards the target</param>
            <returns>The smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector2Linear(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single)">
            <summary>
            Returns a 2D smoother that smooths by moving in linear fashion towards the target in the specified speed.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="speed">The speed that it moves towards the target</param>
            <returns>The smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.FloatLinear(System.Single,System.Single)">
            <summary>
            Returns a smoother that smooths by moving in linear fashion towards the target in the specified speed.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="speed">The speed that it moves towards the target</param>
            <returns>The smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector3DoubleExponential(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single,System.Single)">
            <summary>
            Returns a 3D smoother that smooths using Holt's double exponential smoothing algorithm.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="m_smoothFactor">The most recent value weight in the exponential series</param>
            <param name="m_correctionFactor">The most recent values difference (vector) weight used to correct the smoothed value</param>
            <returns>The smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector2DoubleExponential(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single,System.Single)">
            <summary>
            Returns a 2D smoother that smooths using Holt's double exponential smoothing algorithm.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="m_smoothFactor">The most recent value weight in the exponential series</param>
            <param name="m_correctionFactor">The most recent values difference (vector) weight used to correct the smoothed value</param>
            <returns>The smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.Vector2DoubleExponential(System.Single,System.Single,System.Single)">
            <summary>
            Returns a float smoother that smooths using Holt's double exponential smoothing algorithm.
            </summary>
            <param name="initialValue">Initial value</param>
            <param name="m_smoothFactor">The most recent value weight in the exponential series</param>
            <param name="m_correctionFactor">The most recent values difference (vector) weight used to correct the smoothed value</param>
            <returns>The smoother</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.Smoothing.InitializeStabilizeSmoother``1(OmekFramework.Common.GeneralUtils.StabilizeSmoother{``0},System.Single,System.Int32,System.Int32)">
            <summary>
            Initializes a stabilizer
            </summary>
            <typeparam name="T">The underlying type of the smoother</typeparam>
            <param name="smoohter">The stabilizer smoother to initialize</param>
            <param name="nearStabilizeThreshold">The near stabilizing threshold</param>
            <param name="numFrames">The number of frames to use previous values in the calculations</param>
            <param name="consecutiveFailResetThreshold">Consecutive fails in samples after which we consider the stabilization point to have moved, and therefore reset it.
            Default is zero - never reset</param>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1">
            <summary>
            Abstract implementation of the value based smoother interface.
            Used for providing a new value (CurrentValue) from the given value (TargetValue).
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.m_smoothableData">
            <summary>
            The smoothable data object
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.m_currentValue">
            <summary>
            Current smoothed value
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.m_targetValue">
            <summary>
            The target that we should move to
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.#ctor">
            <summary>
            Constructor for serialization.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.Init(OmekFramework.Common.GeneralUtils.SmoothableData{`0},`0)">
            <summary>
            Init the Smoother
            </summary>
            <param name="dataSmoother">The smoothable data object to use</param>
            <param name="initialValue">Initial value</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.UpdateTarget">
            <summary>
            Used to update the target value into the current value.
            This is run each time the target value is changed.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.CurrentValue">
            <summary>
            Returns the current value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.ValueBasedSmootherImpl`1.TargetValue">
            <summary>
            Gets and sets the target value
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1">
            <summary>
            Abstract implementation of the smoothing based on time interface. That is the the state of the current value
            value is updated in time.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.m_smoothableData">
            <summary>
            The smoothable data object
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.m_currentValue">
            <summary>
            Current smoothed value
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.m_targetValue">
            <summary>
            The target that we should move to
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.#ctor">
            <summary>
            Constructor for serialization.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.Init(OmekFramework.Common.GeneralUtils.SmoothableData{`0},`0)">
            <summary>
            Init the Smoother
            </summary>
            <param name="dataSmoother">The smoothable data object to use</param>
            <param name="initialValue">Initial value</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.Update(System.Single)">
            <summary>
            Update the smoothed value and move towards the target
            </summary>
            <param name="deltaTime">Time passed from last update</param>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.CurrentValue">
            <summary>
            Returns the current value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.TimeBasedSmootherImpl`1.TargetValue">
            <summary>
            Gets and sets the target value
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.SmoothableVector3">
            <summary>
            Implements the SmoothableData interface for Vector3
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector3.DistanceBetween(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Get the distance between two Vector3
            </summary>
            <param name="first">The first Vector3</param>
            <param name="second">The second Vector3</param>
            <returns>The distance between them</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector3.MoveTo(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Move the source Vector3 towards the target Vector3
            </summary>
            <param name="src">Source Vector3</param>
            <param name="dst">Destination Vector3</param>
            <param name="delta">The amount to move</param>
            <returns>The moved Vector3</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector3.Add(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Add two Vector3
            </summary>
            <param name="a">First Vector3</param>
            <param name="b">Second Vector3</param>
            <returns>The added result Vector3</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector3.Sub(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Subtract two Vector3
            </summary>
            <param name="a">First Vector3</param>
            <param name="b">Second Vector3</param>
            <returns>The result Vector3</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector3.Multiply(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Multiply a Vector3 by a scalar
            </summary>
            <param name="a">The Vector3</param>
            <param name="scalar">The scalar</param>
            <returns>The resultnat multipication by the scalar</returns>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.SmoothableVector2">
            <summary>
            Implements the SmoothableData interface for Vector2
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector2.DistanceBetween(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Get the distance between two Vector2
            </summary>
            <param name="first">The first Vector2</param>
            <param name="second">The second Vector2</param>
            <returns>The distance between them</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector2.MoveTo(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single)">
            <summary>
            Move the source Vector3 towards the target Vector2
            </summary>
            <param name="src">Source Vector2</param>
            <param name="dst">Destination Vector2</param>
            <param name="delta">The amount to move</param>
            <returns>The moved Vector2</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector2.Add(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Add two Vector2
            </summary>
            <param name="a">First Vector2</param>
            <param name="b">Second Vector2</param>
            <returns>The added result Vector2</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector2.Sub(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,OmekFramework.Common.BasicTypes.SpaceTypes.Vector2)">
            <summary>
            Subtract two Vector2
            </summary>
            <param name="a">First Vector2</param>
            <param name="b">Second Vector2</param>
            <returns>The result Vector2</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableVector2.Multiply(OmekFramework.Common.BasicTypes.SpaceTypes.Vector2,System.Single)">
            <summary>
            Multiply a Vector2 by a scalar
            </summary>
            <param name="a">The Vector2</param>
            <param name="scalar">The scalar</param>
            <returns>The resultnat multipication by the scalar</returns>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.SmoothableFloat">
            <summary>
            Implements the SmoothableData interface for float
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableFloat.DistanceBetween(System.Single,System.Single)">
            <summary>
            Get the distance between two floats
            </summary>
            <param name="first">The first float</param>
            <param name="second">The second float</param>
            <returns>The distance between them</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableFloat.MoveTo(System.Single,System.Single,System.Single)">
            <summary>
            Move the source float towards the target float
            </summary>
            <param name="src">Source float</param>
            <param name="dst">Destination float</param>
            <param name="delta">The amount to move</param>
            <returns>The moved float</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableFloat.Add(System.Single,System.Single)">
            <summary>
            Add two floats
            </summary>
            <param name="a">First float</param>
            <param name="b">Second float</param>
            <returns>The added result float</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableFloat.Sub(System.Single,System.Single)">
            <summary>
            Sub two floats
            </summary>
            <param name="a">First float</param>
            <param name="b">Second float</param>
            <returns>The result float</returns>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SmoothableFloat.Multiply(System.Single,System.Single)">
            <summary>
            Multiply a float by another float
            </summary>
            <param name="a">The first float</param>
            <param name="scalar">The second float</param>
            <returns>The resultnat multipication</returns>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.SpringSmoother`1">
            <summary>
            Smooths using a simple spring like function, where the move amount in each frame is (distanceToTarget * deltaTime * springStrength)
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.SpringSmoother`1.m_springStrength">
            <summary>
            The spring's strength
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SpringSmoother`1.#ctor">
            <summary>
            Constructor for serialization.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.SpringSmoother`1.Update(System.Single)">
            <summary>
            Update the smoothed value and move towards the target using the spring function
            </summary>
            <param name="deltaTime">Time passed from last update</param>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.LinearSmoother`1">
            <summary>
            Smooths by moving in linear fashion towards the target in the specified speed.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.LinearSmoother`1.m_speed">
            <summary>
            The speed to move
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.LinearSmoother`1.#ctor">
            <summary>
            Constructor for serialization.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.LinearSmoother`1.Update(System.Single)">
            <summary>
            Update the smoothed value by lineary moving towards the target
            </summary>
            <param name="deltaTime">Time passed from last update</param>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1">
            <summary>
            Reduces noise by making sure that new values are far enough from previous values
            and/or close enough to previous values.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_maxDistFromLastSample">
            <summary>
            The maximum distance of any sample from the last acquired sample.
            If higher than this threshold the sampled is discarded.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_cropNear">
            <summary>
            Should samples be checked if they are at a minimum distance from the stabilization point.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_nearStabilizeThreshold">
            <summary>
            Stabilization theshold for cropping too close samples.
            Samples below this distance are discarded.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_numSamples">
            <summary>
            The number of samples to be saved in memory.
            The more there are, the more of the past data will influence where the stabilization point is found.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_cropFar">
            <summary>
            Should samples distances be checked to be below a certain maximum distance, indicating a point which
            is likely result of incorrect data.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_farStabilizeThreshold">
            <summary>
            The far threshold at which points are considered to be of bad data.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_consecutiveFailsToReset">
            <summary>
            The amount of consecutive of sample fails after which it is likely that the
            stabilization point actually needs to move to a new place altogether
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_lastSamples">
            <summary>
            Sample history
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_stabilizedPoint">
            <summary>
            Current stabilization point
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.m_consecutiveFailFrames">
            <summary>
            Current amount of consecutive fails in the new samples.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.UpdateTarget">
            <summary>
            Used to update the target value into the current value.
            This is run each time the target value is changed.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.StabilizeSmoother`1.IsStable">
            <summary>
            Returns true if the current data indicates that most samples are in are close region.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.WeightedSmoother`1">
            <summary>
            Returns a weighted average smoother where the weights describe the weight of each frame.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.WeightedSmoother`1.m_weights">
            <summary>
            The weight from 0-1 of every frame in the average.
            The weights are arranged from the oldest frame to the newest frame.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.WeightedSmoother`1.m_lastPoints">
            <summary>
            The points history.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.WeightedSmoother`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.WeightedSmoother`1.UpdateTarget">
            <summary>
            Used to update the target value into the current value.
            This is run each time the target value is changed.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1">
            <summary>
            Double exponential smoother - meaning that previous values are weighted into the current value
            in an inverse exponential fashion, along with weighting in the trend of values.
            For forumla: http://www.itl.nist.gov/div898/handbook/pmc/section4/pmc433.htm
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1.m_smoothFactor">
            <summary>
            The smooth factor with which to weight previous values to this value.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1.m_correctionFactor">
            <summary>
            The weight of the current trend to the previous trend.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1.m_hasSample">
            <summary>
            Is there any history
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1.m_lastSmoothedValue">
            <summary>
            Previous smoothed value
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1.m_currentSmoothedValue">
            <summary>
            Current smoothed value
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1.m_lastTrendEstimate">
            <summary>
            The previous trend estimate
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.DoubleExponentialSmoother`1.UpdateTarget">
            <summary>
            Used to update the target value into the current value.
            This is run each time the target value is changed.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.CompositeSmoother`1">
            <summary>
            A smoother whose purpose to chain several smoothers together,
            passing the result of one smoother to the next smoother.
            The first set of smoothers are of value type, and after them, time based smoothers.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.m_valueCompositeSmoothers">
            <summary>
            The value based composite smoothers.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.m_timeCompositeSmoothers">
            <summary>
            The time based composite smoothers.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.m_hasValueSmoothers">
            <summary>
            Indicates if there are any value based smoothers
            </summary>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.m_hasTimeSmoothers">
            <summary>
            Indicates if there are any value based smoothers
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.#ctor(OmekFramework.Common.GeneralUtils.ValueBasedSmoother{`0}[],OmekFramework.Common.GeneralUtils.TimeBasedSmoother{`0}[])">
            <summary>
            Creates a composite smoother from value vased smoothers after which time based smoothers.
            This means that the target value is processed in the value based smoothers and is passed on until the time based smoothers
            where it is used in the next time based update.
            </summary>
            <param name="valueBasedSmoothers">An array of the value based smoothers</param>
            <param name="timeBasedSmoothers">An array of the time based smoothers</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.UpdateTimeBaseSmoothers(System.Single)">
            <summary>
            Update the smoothed value and move towards the target
            </summary>
            <param name="deltaTime">Time passed from last update</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.Item(System.Int32)">
            <summary>
            Returns the indexed smoother.
            </summary>
            <param name="index">The index of the smoother to return</param>
            <returns>The indexed smoother</returns>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.CurrentValue">
            <summary>
            Get the current smoothed value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TargetValue">
            <summary>
            Get or set the target that we should move to
            </summary>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.ValueBasedCompositeSmoother`1">
            <summary>
            A smoother whose purpose to chain several value based smoothers together,
            passing the result of one smoother to the next smoother.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.ValueBasedCompositeSmoother`1.m_smoothers">
            <summary>
            The smoothers composited in this smoother.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.ValueBasedCompositeSmoother`1.#ctor(OmekFramework.Common.GeneralUtils.ValueBasedSmoother{`1}[])">
            <summary>
            Constructor
            </summary>
            <param name="smoothers">All the smoothers in the compositie smoother,
            ordered according to their needed operation order</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.ValueBasedCompositeSmoother`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.ValueBasedCompositeSmoother`1.Length">
            <summary>
            Length of the composite smoother chain.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.ValueBasedCompositeSmoother`1.CurrentValue">
            <summary>
            The current smoother value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.ValueBasedCompositeSmoother`1.TargetValue">
            <summary>
            The target smoother value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.ValueBasedCompositeSmoother`1.Item(System.Int32)">
            <summary>
            Returns the indexed smoother
            </summary>
            <param name="index">The index of the smoother to return</param>
            <returns>The indexed smoother</returns>
        </member>
        <member name="T:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1">
            <summary>
            A smoother whose purpose to chain several time based smoothers together,
            passing the result of one smoother to the next smoother.
            </summary>
            <typeparam name="T">The type on which the smoothing is done</typeparam>
        </member>
        <member name="F:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1.m_smoothers">
            <summary>
            The smoothers composited in this smoother.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1.#ctor(OmekFramework.Common.GeneralUtils.TimeBasedSmoother{`1}[])">
            <summary>
            Constructor
            </summary>
            <param name="smoothers">All the smoothers in the compositie smoother,
            ordered according to their needed operation order</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1.Update(System.Single)">
            <summary>
            Update the value
            </summary>
            <param name="deltaTime">Time passed from last update</param>
        </member>
        <member name="M:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1.Reset">
            <summary>
            Reset the smoothing and start from the target value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1.Length">
            <summary>
            Length of the composite smoother chain.
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1.CurrentValue">
            <summary>
            The current smoother value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1.TargetValue">
            <summary>
            The target smoother value
            </summary>
        </member>
        <member name="P:OmekFramework.Common.GeneralUtils.CompositeSmoother`1.TimeBasedCompositeSmoother`1.Item(System.Int32)">
            <summary>
            Returns the indexed smoother
            </summary>
            <param name="index">The index of the smoother to return</param>
            <returns>The indexed smoother</returns>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion">
            <summary>
            Quaternion is a way to represent rotations
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.DEFAULT_FLOAT_FORMAT">
            <summary>
            Default float format used to display the Quaternion components.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.COORDINATE_EQUALITY_EPSILON">
            <summary>
            Used to indicate if the distance in each coordinate in two Quaternion is close enough.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.w">
            <summary>
            The w coordinate
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.x">
            <summary>
            The x coordinate
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.y">
            <summary>
            The y coordinate
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.z">
            <summary>
            The z coordinate
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Quaternion with the given x, y, z and w coordinates.
            </summary>
            <param name="x">X value for the Quaternion</param>
            <param name="y">Y value for the Quaternion</param>
            <param name="z">Z value for the Quaternion</param>
            <param name="w">W value for the Quaternion</param>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.CONST_IDENTITIY">
            <summary>
            Used to obtain the const identity Quaternion
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.Magnitude(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion)">
            <summary>
            Returns the length of this quaternion
            </summary>
            <returns>The length of this quaternion</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.SqrMagnitude(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion)">
            <summary>
            Returns the squared length of this quaternion
            </summary>
            <returns>The squared length of this quaternion</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.Normalize">
            <summary>
            Normalizes this quaternion.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.Normalized">
            <summary>
            Returns this quaternion with a magnitude of 1
            </summary>
            <returns>Copy of this quaternion with a magnitude of 1</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.op_Inequality(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion)">
            <summary>
            Returns true if both Quaternion are different in any coordinates.
            Note that even close Quaternion are different.
            </summary>
            <param name="lhs">Left hand Quaternion</param>
            <param name="rhs">Right hand Quaternion</param>
            <returns>True if the Quaternion are not equal</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.op_Equality(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion)">
            <summary>
            Returns true if both Quaternion are the same in all coordinates.
            Note that even close Quaternion are different.
            </summary>
            <param name="lhs">Left hand Quaternion</param>
            <param name="rhs">Right hand Quaternion</param>
            <returns>True if the Quaternion are equal</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.SameValued(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion)">
            <summary>
            Returns true if both Quaternions are very close in all their coordinates.
            </summary>
            <param name="lhs">The left handed Quaternion</param>
            <param name="rhs">The right handed Quaternion</param>
            <returns>True if both Quaternion are very close in all their coordinates</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.op_Multiply(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion)">
            <summary>
            Multiplies a Quaternion by another Quaternion
            </summary>
            <param name="lhs">Quaternion on the left hand side of the multipication</param>
            <param name="rhs">Quaternion on the right hand side of the multipication</param>
            <returns>The resultnat Quaternion</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.op_Multiply(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Multiplies a Quaternion by a Vector3
            </summary>
            <param name="rotation">The Quaternion</param>
            <param name="point">The Vector3</param>
            <returns>The resultnat Quaternion</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.op_UnaryNegation(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion)">
            <summary>
            return all component of the Quaternion multyplied by minus 1
            </summary>
            <param name="quat">the quaternion to invert</param>
            <returns>all component of the Quaternion multyplied by minus 1</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.op_Multiply(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,System.Single)">
            <summary>
            scale each component by the same scale
            </summary>
            <param name="rotation">input quaternion</param>
            <param name="scale">scale factor to multiply each component</param>
            <returns>a Quaternion with each component multiplied by the same scale</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.op_Division(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,System.Single)">
            <summary>
            divide each component by the same scale
            </summary>
            <param name="rotation">input quaternion</param>
            <param name="d">scale factor to divide each component</param>
            <returns>a Quaternion with each component divide by the same scale</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.op_Addition(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion)">
            <summary>
            Add 2 Quaternion component by component
            </summary>
            <param name="lhs">first input quaternion</param>
            <param name="rhs">second input quaternion</param>
            <returns>A quaternion where each component is the sum of the same componenet in the input quaternion</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.Lerp(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,System.Single)">
            <summary>
            computes the dot product of 2 quaternions
            </summary>
            <param name="q1">first input quaternion</param>
            <param name="q2">second input quaternion</param>
            <returns>the dot product of 2 quaternions</returns>
            <summary>
            Linearly interpolate between 2 Quaternions
            </summary>
            <param name="from">from quaternion</param>
            <param name="to">to quaternion</param>
            <param name="t">the ratio between the 2 input quaternions</param>
            <returns>Linear interpolation between 2 Quaternions</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.Slerp(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion,System.Single)">
            <summary>
            spherical linear interpolation
            </summary>
            <param name="q1">from quaternion</param>
            <param name="q2">to quaternion</param>
            <param name="t">the ratio between the 2 input quaternions</param>
            <returns>spherical linear interpolation between 2 Quaternions</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.Equals(System.Object)">
            <summary>
            Returns True if the other given object is a Quaternion that is equal to this Quaternion.
            </summary>
            <param name="obj">The other object</param>
            <returns>True if the other given object is a Quaternion that is equal to this Quaternion</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this Quaternion.
            </summary>
            <returns>A hash code for this Quaternion</returns>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.identity">
            <summary>
            Shorthand for writing Quaternion(0, 0, 0, 1)
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.Item(System.Int32)">
            <summary>
            access vector values by indexer
            </summary>
        </member>
        <member name="P:OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion.normalized">
            <summary>
            Returns a copy of this quaternion normalized.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.BasicTypes.MovementBox">
            <summary>
            A data structure of box in space meant to be placed relatively to another position.
            The box dimensions and offset are in arbitrary units meant to be used from the outside.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.MovementBox.CenterOffset">
            <summary>
            The center position offset
            </summary>
        </member>
        <member name="F:OmekFramework.Common.BasicTypes.MovementBox.Dimensions">
            <summary>
            The dimensions of the box.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementBox.#ctor(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Constructor.
            </summary>
            <param name="centerOffset">The center position offset</param>
            <param name="dimensions">The dimensions of the box</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementBox.#ctor(OmekFramework.Common.BasicTypes.MovementBox)">
            <summary>
            copy constructor
            </summary>
            <param name="other">object to copy</param>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementBox.Contain(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3)">
            <summary>
            Check id a 3D position is inside this MovementBox
            </summary>
            <param name="targetPosition">the 3D position</param>
            <returns>true iff targetPosition is inside this MovementBox</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementBox.ToString">
            <returns>string representation of the movementBox</returns>
        </member>
        <member name="M:OmekFramework.Common.BasicTypes.MovementBox.NormalizeToMovementBox(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,OmekFramework.Common.BasicTypes.SpaceTypes.Vector3,System.Single)">
            <summary>
            Calculate the normalize position (in rang [0,1] of a specific point inside this MovementBox (relative to an anchor)
            </summary>
            <param name="pos">the position to check</param>
            <param name="anchor">an anchor point that the movement box is relative to </param>
            <param name="multiplier">factor to multiply the MovementBox simensions by</param>
            <returns>The normalize position of pos</returns>
        </member>
        <member name="T:OmekFramework.Common.Main.Gestures">
            <summary>
            An interface for all gesture related capabilities of the framework
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Main.Gestures.m_eventNotifier">
            <summary>
             Responsible on the actual work this class does, by registration, updating and dispatching events.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.UpdateState">
            <summary>
            Update the state of the gesture system - this must be used to get current gestures and discard the previous gestures.
            </summary>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.EnableSDKGesture(System.String)">
            <summary>
            Enable the specified sdk gesture.
            </summary>
            <param name="gestureName">The gesture name</param>
            <returns>>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.DisableSDKGesture(System.String)">
            <summary>
            Disable the specified sdk gesture.
            </summary>
            <param name="gestureName">The gesture name</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.AddCodedGesture``1(System.String)">
            <summary>
            Add a new coded gesture.
            An instance of this coded gesture will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system. Note that all reference types in the coded gesture will be copied by default unless otherwise overriden in the type.
            </summary>
            <typeparam name="T">The type of the coded gesture</typeparam>
            <param name="gestureName">The name to use as the identifier of the coded gesture</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.AddCodedGesture(System.Type,System.String)">
            <summary>
            Add a new coded gesture.
            An instance of this coded gesture will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system. Note all reference types in the coded gesture will be copied by default unless otherwise overriden in the type.
            </summary>
            <param name="SDKEventDispatcherType">The type of the coded gesture. Must be derived from SDKEventDispatcher</param>
            <param name="gestureName">The name to use as the identifier of the coded gesture</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.AddCodedGesture``1(System.String,OmekFramework.Common.Main.SDKEventDispatcher.MetaData)">
            <summary>
            Add a new coded gesture.
            An instance of this coded gesture will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system, all sharing the given metaData object. Note that apart from the explicit meta data object
            all other reference types in the coded gesture will be copied by default unless otherwise overriden in the type.
            </summary>
            <typeparam name="T">The type of the coded gesture</typeparam>
            <param name="gestureName">The name to use as the identifier of the coded gesture</param>
            <param name="metaData">Meta data object to be shared by generated instances of the coded gesture. Note that if there is no constructor in the coded gesture
            with the MetaData or type that derived from it, it will be constructed with no meta data.</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.AddCodedGesture(System.Type,System.String,OmekFramework.Common.Main.SDKEventDispatcher.MetaData)">
            <summary>
            Add a new coded gesture.
            An instance of this coded gesture will be created, and if it is a TrackedObjectCodedEventDispatcher it will be shallow copied
            for each of the persons in the system, all sharing the given metaData object. Note that apart from the explicit meta data object
            all other reference types in the coded gesture will be copied by default unless otherwise overriden in the type.
            </summary>
            <param name="SDKEventDispatcherType">The type of the coded event. Must be derived from SDKEventDispatcher</param>
            <param name="gestureName">The name to use as the identifier of the coded gesture</param>
            <param name="metaData">Meta data object to be shared by generated instances of the coded gesture. Note that if there is no constructor in the coded gesture
            with the MetaData or type that derived from it, it will be constructed with no meta data.</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.RemoveCodedGesture(OmekFramework.Common.Main.SDKEventDispatcher)">
            <summary>
            Remove the coded gesture to the detected gestures.
            </summary>
            <param name="codedGestureToRemove">The gesture to stop detecting</param>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.RemoveCodedGesture(System.String)">
            <summary>
            Remove the coded gesture to the detected gestures.
            </summary>
            <param name="codedGestureToRemove">The gesture to stop detecting</param>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.RemoveCodedGesture``1">
            <summary>
            Remove the coded gesture to the detected gestures.
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.GetCodedGestureOfTrackedObject(System.UInt32,System.String)">
            <summary>
            Get a TrackedObjectCodedEventDispatcher with specific name that is attached to spcific tracked objects
            </summary>
            <param name="trackedObjectID">the tracked object id</param>
            <param name="gestureName">the gesture name</param>
            <returns>the requested TrackedObjectCodedEventDispatcher, null if none found</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.IsGestureActive``1">
            <summary>
            Check if the coded gesture is active.
            </summary>
            <typeparam name="T">The coded gesture type to check</typeparam>
            <returns>If the gesture is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.IsGestureActive``1(System.Collections.Generic.List{OmekFramework.Common.BasicTypes.CommonDefines.EventNotification}@)">
            <summary>
            Check if the coded gesture is active and if so return info on all of the gesture occurrences in the last frame.
            </summary>
            <typeparam name="T">The coded gesture type to check</typeparam>
            <param name="gestureoccurrences">(output) all the occurrences of the gesture.</param>
            <returns>If the gesture is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.IsGestureActive">
            <summary>
            Check if any gesture is active.
            </summary>
            <returns>If any gesture is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.IsGestureActive(System.String)">
            <summary>
            Check if the gesture is active.
            </summary>
            <param name="gestureName">The coded gesture name to check</param>
            <returns>If the gesture is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.IsGestureActive(System.String,System.UInt32)">
            <summary>
            Check if the gesture is active accroding to the entered personID.
            </summary>
            <param name="gestureName">The gesture name to check</param>
            <param name="trackedObjectID">The person id to check</param>
            <returns>True if the gesture is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.IsGestureActive(System.String,System.Collections.Generic.List{OmekFramework.Common.BasicTypes.CommonDefines.EventNotification}@)">
            <summary>
            Check if the gesture is active and if so return info on all of on all of the gesture occurrences in the last frame.
            </summary>
            <param name="gestureName">The coded gesture name to check</param>
            <param name="gestureoccurrences">(output) all the occurrences of the gesture.</param>
            <returns>If the gesture is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.IsGestureActive(System.String,System.UInt32,OmekFramework.Common.BasicTypes.CommonDefines.EventNotification@)">
            <summary>
            Check if the gesture is active accroding to the entered personID and get information on the gesture occurrence.
            </summary>
            <param name="gestureName">The gesture name to check</param>
            <param name="trackedObjectID">The person id to check</param>
            <param name="gestureoccurrence">The occurrence details of the grsture</param>
            <returns>True if the gesture is active</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.RegisterOnGesture(System.String,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register to call the given OnSDKEvent function if any occurrence of the specified gesture occurres.
            The OnEvent function will be called for each occurrence of the gesture and for each person.
            </summary>
            <param name="gestureName">The name of the gesture for which the OnSDKEvent should be fired </param>
            <param name="onGesture">The OnSDKEvent that should be fired</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.RegisterOnGesture(System.String,System.UInt32,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Register to call the given OnSDKEvent function if any occurrence of the specified gesture occurres for the specified person.
            The OnEvent function will be called for each occurrence of the gesture for the specified person.
            </summary>
            <param name="gestureName">The name of the gesture for which the OnSDKEvent should be fired</param>
            <param name="trackedObjectID">The person ID for which the event should be fired</param>
            <param name="onGesture">The OnSDKEvent that should be fired</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.UnregisterOnGesture(System.String,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister the given OnSDKEvent function for the specified gesture.
            </summary>
            <param name="gestureName">The name of the gesture for which the OnSDKEvent shouldn't be fired</param>
            <param name="onGesture">The OnSDKEvent that shouldn't be fired</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.UnregisterOnGesture(System.String,System.UInt32,OmekFramework.Common.Main.OnSDKEvent)">
            <summary>
            Unregister the given OnSDKEvent function for the specified person for the specified gesture.
            </summary>
            <param name="gestureName">The name of the gesture for which the OnSDKEvent shouldn't be fired</param>
            <param name="trackedObjectID">The person id for which not to fire the event no more</param>
            <param name="onGesture">The OnSDKEvent that shouldn't be fired</param>
            <returns>Return code indicating the state of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.GetCurrentGesturesCopy">
            <summary>
            Returns the a copy of all the current gestures.
            </summary>
            <returns>A copy of all current gestures</returns>
        </member>
        <member name="M:OmekFramework.Common.Main.Gestures.CurrentGestureNames">
            <summary>
            Returns all current gesture names.
            </summary>
            <returns>All current gesture names</returns>
        </member>
        <member name="P:OmekFramework.Common.Main.Gestures.Instance">
            <summary>
            A singleton instance.
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.Skeleton">
            <summary>
            High Level API wrapper of getting skeleton, positions, rotations and confidence
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.Skeleton.m_jointsIDDictionary">
            <summary>
            A mapping between joint IDs and Joint objects.
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.Skeleton.m_lastRequestUpdateTime">
            <summary>
            Last SDK frame at which the the parameters where requested
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.Skeleton.#ctor(System.UInt32)">
            <summary>
            Constructor of the Joints collection.
            </summary>
            <param name="handIndex">The person index for which this skeleton belongs to</param>
            <param name="joints">array to relevant joint for this skeleton</param>
        </member>
        <member name="M:OmekFramework.Common.Data.Skeleton.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.Skeleton.Dispose">
            <summary>
            clear resources held by this object
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.Skeleton.Item(Omek.JointID)">
            <summary>
            Indexer to a Joint according to a joint id.
            </summary>
            <param name="jointID">The joint id for which to get the Joint</param>
            <returns>The corresponding Joint</returns>
        </member>
        <member name="T:OmekFramework.Common.Data.Joint">
            <summary>
            Represents a single skeleton Joint
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.Joint.m_position">
            <summary>
            The joint's position
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.Joint.m_rotation">
            <summary>
            The joint's rotation
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.Joint.m_confidence">
            <summary>
            The joint's confidence
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.Joint.#ctor(OmekFramework.Common.Data.Skeleton,Omek.JointID)">
            <summary>
            Constructor
            </summary>
            <param name="skeletonCollectionRef">reference to the JointCollection this joint is using</param>
            <param name="jID">The joint id of the joint</param>
        </member>
        <member name="P:OmekFramework.Common.Data.Joint.Position">
            <summary>
            The joint's position
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.Joint.Rotation">
            <summary>
            The joint's rotation
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.Joint.Confidence">
            <summary>
            The joint's rotation
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.JointSpace">
            <summary>
            Contains data about the joint and how it is acquired
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointSpace.JointID">
            <summary>
            The joint id of the joint
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointSpace.m_jskeletonRef">
            <summary>
            refernce to joint collection
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointSpace.m_lastRequestUpdateTime">
            <summary>
            Last SDK frame at which the parameters where requested
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointSpace.m_lastReturnCode">
            <summary>
            the last return code where the parameters where checked
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.JointSpace.#ctor(OmekFramework.Common.Data.Skeleton,Omek.JointID)">
            <summary>
            Constructor
            </summary>
            <param name="skeletonRef">reference to the JointCollection this jointSpace is using</param>
            <param name="in_jointID">The joint id of the joint</param>
        </member>
        <member name="T:OmekFramework.Common.Data.JointPosition">
            <summary>
            Wraps the position of a joint
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointPosition.m_image">
            <summary>
            The image spaced position
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointPosition.m_world">
            <summary>
            The world spaced position
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.JointPosition.#ctor(OmekFramework.Common.Data.Skeleton,Omek.JointID)">
            <summary>
            Constructor
            </summary>
            <param name="skeletonRef">reference to the JointCollection this JointPosition is using</param>
            <param name="jID">The joint id of the joint</param>
        </member>
        <member name="P:OmekFramework.Common.Data.JointPosition.Image">
            <summary>
            Gets the image spaced position
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.JointPosition.World">
            <summary>
            Gets the world spaced position
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.JointRotation">
            <summary>
            Wraps the rotation of a joint
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointRotation.m_local">
            <summary>
            The local rotation
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointRotation.m_global">
            <summary>
            The global rotation
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.JointRotation.#ctor(OmekFramework.Common.Data.Skeleton,Omek.JointID)">
            <summary>
            Constructor
            </summary>
            <param name="skeletonRef">reference to the JointCollection this JointPosition is using</param>
            <param name="jID">The joint id of the joint</param>
        </member>
        <member name="P:OmekFramework.Common.Data.JointRotation.Local">
            <summary>
            Gets the local rotation
            </summary>
        </member>
        <member name="P:OmekFramework.Common.Data.JointRotation.Global">
            <summary>
            Gets the global rotation
            </summary>
        </member>
        <member name="T:OmekFramework.Common.Data.JointPositionGetter">
            <summary>
            Allows the acquirement of joint's position
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointPositionGetter.m_isWorldSpace">
            <summary>
            is this position is in world space
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointPositionGetter.m_lastPosition">
            <summary>
            The last tracked position of the joint
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.JointPositionGetter.#ctor(OmekFramework.Common.Data.Skeleton,Omek.JointID,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="skeletonRef">reference to the JointCollection this JointPosition is using</param>
            <param name="in_jointID">The joint id of the joint</param>
            <param name="in_isWorldSpace">Is the joint getter in world space or image space</param>
        </member>
        <member name="M:OmekFramework.Common.Data.JointPositionGetter.Get(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@)">
            <summary>
            Gets the position
            </summary>
            <param name="outPos">(output) the out position</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="T:OmekFramework.Common.Data.JointRotationGetter">
            <summary>
            Allows the acquirement of joint's rotation
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointRotationGetter.m_isGlobalRotation">
            <summary>
            Is the rotation global or local
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointRotationGetter.m_lastRotation">
            <summary>
            The last tracked rotation of the joint
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointRotationGetter.m_lastEularRotation">
            <summary>
            The last tracked rotation of the joint in Euler angles representation
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.JointRotationGetter.#ctor(OmekFramework.Common.Data.Skeleton,Omek.JointID,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="skeletonRef">reference to the skeleton this object is using</param>
            <param name="in_jointID">The joint id of the joint</param>
            <param name="in_isGlobalSpace">Is the joint getter in global space or local space</param>
        </member>
        <member name="M:OmekFramework.Common.Data.JointRotationGetter.Get(OmekFramework.Common.BasicTypes.SpaceTypes.Quaternion@)">
            <summary>
            Gets the rotation
            </summary>
            <param name="outRot">(output) the out rotation</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="M:OmekFramework.Common.Data.JointRotationGetter.Get(OmekFramework.Common.BasicTypes.SpaceTypes.Vector3@)">
            <summary>
            Gets the rotation as Euler angles
            </summary>
            <param name="outRot">(output) the out rotation as Euler angles</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
        <member name="T:OmekFramework.Common.Data.JointConfidenceGetter">
            <summary>
            Allows the acquirement of joint's confidence
            </summary>
        </member>
        <member name="F:OmekFramework.Common.Data.JointConfidenceGetter.m_lastConfidence">
            <summary>
            The last confidence of the joint
            </summary>
        </member>
        <member name="M:OmekFramework.Common.Data.JointConfidenceGetter.#ctor(OmekFramework.Common.Data.Skeleton,Omek.JointID)">
            <summary>
            Constructor
            </summary>
            <param name="skeletonRef">reference to the Skeleton this object is using</param>
            <param name="in_jointID">The joint id of the joint</param>
        </member>
        <member name="M:OmekFramework.Common.Data.JointConfidenceGetter.Get(System.UInt32@)">
            <summary>
            Gets the confidence
            </summary>
            <param name="outConf">(output) the out confidence</param>
            <returns>ReturnCode indicating status of the run</returns>
        </member>
    </members>
</doc>
